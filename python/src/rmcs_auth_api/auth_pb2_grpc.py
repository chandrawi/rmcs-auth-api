# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import auth_pb2 as auth__pb2


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ApiLoginKey = channel.unary_unary(
                '/auth.AuthService/ApiLoginKey',
                request_serializer=auth__pb2.ApiKeyRequest.SerializeToString,
                response_deserializer=auth__pb2.ApiKeyResponse.FromString,
                )
        self.ApiLogin = channel.unary_unary(
                '/auth.AuthService/ApiLogin',
                request_serializer=auth__pb2.ApiLoginRequest.SerializeToString,
                response_deserializer=auth__pb2.ApiLoginResponse.FromString,
                )
        self.UserLoginKey = channel.unary_unary(
                '/auth.AuthService/UserLoginKey',
                request_serializer=auth__pb2.UserKeyRequest.SerializeToString,
                response_deserializer=auth__pb2.UserKeyResponse.FromString,
                )
        self.UserLogin = channel.unary_unary(
                '/auth.AuthService/UserLogin',
                request_serializer=auth__pb2.UserLoginRequest.SerializeToString,
                response_deserializer=auth__pb2.UserLoginResponse.FromString,
                )
        self.UserRefresh = channel.unary_unary(
                '/auth.AuthService/UserRefresh',
                request_serializer=auth__pb2.UserRefreshRequest.SerializeToString,
                response_deserializer=auth__pb2.UserRefreshResponse.FromString,
                )
        self.UserLogout = channel.unary_unary(
                '/auth.AuthService/UserLogout',
                request_serializer=auth__pb2.UserLogoutRequest.SerializeToString,
                response_deserializer=auth__pb2.UserLogoutResponse.FromString,
                )


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ApiLoginKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApiLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserLoginKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserRefresh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserLogout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ApiLoginKey': grpc.unary_unary_rpc_method_handler(
                    servicer.ApiLoginKey,
                    request_deserializer=auth__pb2.ApiKeyRequest.FromString,
                    response_serializer=auth__pb2.ApiKeyResponse.SerializeToString,
            ),
            'ApiLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.ApiLogin,
                    request_deserializer=auth__pb2.ApiLoginRequest.FromString,
                    response_serializer=auth__pb2.ApiLoginResponse.SerializeToString,
            ),
            'UserLoginKey': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLoginKey,
                    request_deserializer=auth__pb2.UserKeyRequest.FromString,
                    response_serializer=auth__pb2.UserKeyResponse.SerializeToString,
            ),
            'UserLogin': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLogin,
                    request_deserializer=auth__pb2.UserLoginRequest.FromString,
                    response_serializer=auth__pb2.UserLoginResponse.SerializeToString,
            ),
            'UserRefresh': grpc.unary_unary_rpc_method_handler(
                    servicer.UserRefresh,
                    request_deserializer=auth__pb2.UserRefreshRequest.FromString,
                    response_serializer=auth__pb2.UserRefreshResponse.SerializeToString,
            ),
            'UserLogout': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLogout,
                    request_deserializer=auth__pb2.UserLogoutRequest.FromString,
                    response_serializer=auth__pb2.UserLogoutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ApiLoginKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthService/ApiLoginKey',
            auth__pb2.ApiKeyRequest.SerializeToString,
            auth__pb2.ApiKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ApiLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthService/ApiLogin',
            auth__pb2.ApiLoginRequest.SerializeToString,
            auth__pb2.ApiLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserLoginKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthService/UserLoginKey',
            auth__pb2.UserKeyRequest.SerializeToString,
            auth__pb2.UserKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserLogin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthService/UserLogin',
            auth__pb2.UserLoginRequest.SerializeToString,
            auth__pb2.UserLoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserRefresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthService/UserRefresh',
            auth__pb2.UserRefreshRequest.SerializeToString,
            auth__pb2.UserRefreshResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserLogout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/auth.AuthService/UserLogout',
            auth__pb2.UserLogoutRequest.SerializeToString,
            auth__pb2.UserLogoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
