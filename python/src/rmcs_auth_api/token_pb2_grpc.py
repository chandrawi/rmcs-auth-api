# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from rmcs_auth_api import token_pb2 as rmcs__auth__api_dot_token__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rmcs_auth_api/token_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TokenServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadAccessToken = channel.unary_unary(
                '/token.TokenService/ReadAccessToken',
                request_serializer=rmcs__auth__api_dot_token__pb2.AccessId.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenReadResponse.FromString,
                _registered_method=True)
        self.ListAuthToken = channel.unary_unary(
                '/token.TokenService/ListAuthToken',
                request_serializer=rmcs__auth__api_dot_token__pb2.AuthToken.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenListResponse.FromString,
                _registered_method=True)
        self.ListTokenByUser = channel.unary_unary(
                '/token.TokenService/ListTokenByUser',
                request_serializer=rmcs__auth__api_dot_token__pb2.UserId.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenListResponse.FromString,
                _registered_method=True)
        self.CreateAccessToken = channel.unary_unary(
                '/token.TokenService/CreateAccessToken',
                request_serializer=rmcs__auth__api_dot_token__pb2.TokenSchema.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenCreateResponse.FromString,
                _registered_method=True)
        self.CreateAuthToken = channel.unary_unary(
                '/token.TokenService/CreateAuthToken',
                request_serializer=rmcs__auth__api_dot_token__pb2.AuthTokenCreate.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.AuthTokenCreateResponse.FromString,
                _registered_method=True)
        self.UpdateAccessToken = channel.unary_unary(
                '/token.TokenService/UpdateAccessToken',
                request_serializer=rmcs__auth__api_dot_token__pb2.TokenUpdate.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenUpdateResponse.FromString,
                _registered_method=True)
        self.UpdateAuthToken = channel.unary_unary(
                '/token.TokenService/UpdateAuthToken',
                request_serializer=rmcs__auth__api_dot_token__pb2.TokenUpdate.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenUpdateResponse.FromString,
                _registered_method=True)
        self.DeleteAccessToken = channel.unary_unary(
                '/token.TokenService/DeleteAccessToken',
                request_serializer=rmcs__auth__api_dot_token__pb2.AccessId.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenChangeResponse.FromString,
                _registered_method=True)
        self.DeleteAuthToken = channel.unary_unary(
                '/token.TokenService/DeleteAuthToken',
                request_serializer=rmcs__auth__api_dot_token__pb2.AuthToken.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenChangeResponse.FromString,
                _registered_method=True)
        self.DeleteTokenByUser = channel.unary_unary(
                '/token.TokenService/DeleteTokenByUser',
                request_serializer=rmcs__auth__api_dot_token__pb2.UserId.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_token__pb2.TokenChangeResponse.FromString,
                _registered_method=True)


class TokenServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadAccessToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAuthToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTokenByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAccessToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateAuthToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAccessToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAuthToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccessToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAuthToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTokenByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadAccessToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAccessToken,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.AccessId.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenReadResponse.SerializeToString,
            ),
            'ListAuthToken': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAuthToken,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.AuthToken.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenListResponse.SerializeToString,
            ),
            'ListTokenByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTokenByUser,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.UserId.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenListResponse.SerializeToString,
            ),
            'CreateAccessToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAccessToken,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.TokenSchema.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenCreateResponse.SerializeToString,
            ),
            'CreateAuthToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAuthToken,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.AuthTokenCreate.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.AuthTokenCreateResponse.SerializeToString,
            ),
            'UpdateAccessToken': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAccessToken,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.TokenUpdate.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenUpdateResponse.SerializeToString,
            ),
            'UpdateAuthToken': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAuthToken,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.TokenUpdate.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenUpdateResponse.SerializeToString,
            ),
            'DeleteAccessToken': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccessToken,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.AccessId.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenChangeResponse.SerializeToString,
            ),
            'DeleteAuthToken': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAuthToken,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.AuthToken.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenChangeResponse.SerializeToString,
            ),
            'DeleteTokenByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTokenByUser,
                    request_deserializer=rmcs__auth__api_dot_token__pb2.UserId.FromString,
                    response_serializer=rmcs__auth__api_dot_token__pb2.TokenChangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'token.TokenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('token.TokenService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TokenService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadAccessToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/ReadAccessToken',
            rmcs__auth__api_dot_token__pb2.AccessId.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListAuthToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/ListAuthToken',
            rmcs__auth__api_dot_token__pb2.AuthToken.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTokenByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/ListTokenByUser',
            rmcs__auth__api_dot_token__pb2.UserId.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAccessToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/CreateAccessToken',
            rmcs__auth__api_dot_token__pb2.TokenSchema.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateAuthToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/CreateAuthToken',
            rmcs__auth__api_dot_token__pb2.AuthTokenCreate.SerializeToString,
            rmcs__auth__api_dot_token__pb2.AuthTokenCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAccessToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/UpdateAccessToken',
            rmcs__auth__api_dot_token__pb2.TokenUpdate.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAuthToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/UpdateAuthToken',
            rmcs__auth__api_dot_token__pb2.TokenUpdate.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenUpdateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccessToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/DeleteAccessToken',
            rmcs__auth__api_dot_token__pb2.AccessId.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAuthToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/DeleteAuthToken',
            rmcs__auth__api_dot_token__pb2.AuthToken.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTokenByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/token.TokenService/DeleteTokenByUser',
            rmcs__auth__api_dot_token__pb2.UserId.SerializeToString,
            rmcs__auth__api_dot_token__pb2.TokenChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
