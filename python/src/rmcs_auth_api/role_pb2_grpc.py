# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import role_pb2 as role__pb2


class RoleServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadRole = channel.unary_unary(
                '/role.RoleService/ReadRole',
                request_serializer=role__pb2.RoleId.SerializeToString,
                response_deserializer=role__pb2.RoleReadResponse.FromString,
                )
        self.ReadRoleByName = channel.unary_unary(
                '/role.RoleService/ReadRoleByName',
                request_serializer=role__pb2.RoleName.SerializeToString,
                response_deserializer=role__pb2.RoleReadResponse.FromString,
                )
        self.ListRoleByApi = channel.unary_unary(
                '/role.RoleService/ListRoleByApi',
                request_serializer=role__pb2.ApiId.SerializeToString,
                response_deserializer=role__pb2.RoleListResponse.FromString,
                )
        self.ListRoleByUser = channel.unary_unary(
                '/role.RoleService/ListRoleByUser',
                request_serializer=role__pb2.UserId.SerializeToString,
                response_deserializer=role__pb2.RoleListResponse.FromString,
                )
        self.CreateRole = channel.unary_unary(
                '/role.RoleService/CreateRole',
                request_serializer=role__pb2.RoleSchema.SerializeToString,
                response_deserializer=role__pb2.RoleCreateResponse.FromString,
                )
        self.UpdateRole = channel.unary_unary(
                '/role.RoleService/UpdateRole',
                request_serializer=role__pb2.RoleUpdate.SerializeToString,
                response_deserializer=role__pb2.RoleChangeResponse.FromString,
                )
        self.DeleteRole = channel.unary_unary(
                '/role.RoleService/DeleteRole',
                request_serializer=role__pb2.RoleId.SerializeToString,
                response_deserializer=role__pb2.RoleChangeResponse.FromString,
                )
        self.AddRoleAccess = channel.unary_unary(
                '/role.RoleService/AddRoleAccess',
                request_serializer=role__pb2.RoleAccess.SerializeToString,
                response_deserializer=role__pb2.RoleChangeResponse.FromString,
                )
        self.RemoveRoleAccess = channel.unary_unary(
                '/role.RoleService/RemoveRoleAccess',
                request_serializer=role__pb2.RoleAccess.SerializeToString,
                response_deserializer=role__pb2.RoleChangeResponse.FromString,
                )


class RoleServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRoleByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoleByApi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoleByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRoleAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveRoleAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadRole': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRole,
                    request_deserializer=role__pb2.RoleId.FromString,
                    response_serializer=role__pb2.RoleReadResponse.SerializeToString,
            ),
            'ReadRoleByName': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRoleByName,
                    request_deserializer=role__pb2.RoleName.FromString,
                    response_serializer=role__pb2.RoleReadResponse.SerializeToString,
            ),
            'ListRoleByApi': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoleByApi,
                    request_deserializer=role__pb2.ApiId.FromString,
                    response_serializer=role__pb2.RoleListResponse.SerializeToString,
            ),
            'ListRoleByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoleByUser,
                    request_deserializer=role__pb2.UserId.FromString,
                    response_serializer=role__pb2.RoleListResponse.SerializeToString,
            ),
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=role__pb2.RoleSchema.FromString,
                    response_serializer=role__pb2.RoleCreateResponse.SerializeToString,
            ),
            'UpdateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRole,
                    request_deserializer=role__pb2.RoleUpdate.FromString,
                    response_serializer=role__pb2.RoleChangeResponse.SerializeToString,
            ),
            'DeleteRole': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRole,
                    request_deserializer=role__pb2.RoleId.FromString,
                    response_serializer=role__pb2.RoleChangeResponse.SerializeToString,
            ),
            'AddRoleAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRoleAccess,
                    request_deserializer=role__pb2.RoleAccess.FromString,
                    response_serializer=role__pb2.RoleChangeResponse.SerializeToString,
            ),
            'RemoveRoleAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveRoleAccess,
                    request_deserializer=role__pb2.RoleAccess.FromString,
                    response_serializer=role__pb2.RoleChangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'role.RoleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RoleService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/ReadRole',
            role__pb2.RoleId.SerializeToString,
            role__pb2.RoleReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadRoleByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/ReadRoleByName',
            role__pb2.RoleName.SerializeToString,
            role__pb2.RoleReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRoleByApi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/ListRoleByApi',
            role__pb2.ApiId.SerializeToString,
            role__pb2.RoleListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRoleByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/ListRoleByUser',
            role__pb2.UserId.SerializeToString,
            role__pb2.RoleListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/CreateRole',
            role__pb2.RoleSchema.SerializeToString,
            role__pb2.RoleCreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/UpdateRole',
            role__pb2.RoleUpdate.SerializeToString,
            role__pb2.RoleChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/DeleteRole',
            role__pb2.RoleId.SerializeToString,
            role__pb2.RoleChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRoleAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/AddRoleAccess',
            role__pb2.RoleAccess.SerializeToString,
            role__pb2.RoleChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveRoleAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/role.RoleService/RemoveRoleAccess',
            role__pb2.RoleAccess.SerializeToString,
            role__pb2.RoleChangeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
