# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from rmcs_auth_api import role_pb2 as rmcs__auth__api_dot_role__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rmcs_auth_api/role_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RoleServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadRole = channel.unary_unary(
                '/role.RoleService/ReadRole',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleId.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleReadResponse.FromString,
                _registered_method=True)
        self.ReadRoleByName = channel.unary_unary(
                '/role.RoleService/ReadRoleByName',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleName.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleReadResponse.FromString,
                _registered_method=True)
        self.ListRoleByIds = channel.unary_unary(
                '/role.RoleService/ListRoleByIds',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleIds.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
                _registered_method=True)
        self.ListRoleByApi = channel.unary_unary(
                '/role.RoleService/ListRoleByApi',
                request_serializer=rmcs__auth__api_dot_role__pb2.ApiId.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
                _registered_method=True)
        self.ListRoleByUser = channel.unary_unary(
                '/role.RoleService/ListRoleByUser',
                request_serializer=rmcs__auth__api_dot_role__pb2.UserId.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
                _registered_method=True)
        self.ListRoleByName = channel.unary_unary(
                '/role.RoleService/ListRoleByName',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleName.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
                _registered_method=True)
        self.ListRoleOption = channel.unary_unary(
                '/role.RoleService/ListRoleOption',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleOption.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
                _registered_method=True)
        self.CreateRole = channel.unary_unary(
                '/role.RoleService/CreateRole',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleSchema.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleCreateResponse.FromString,
                _registered_method=True)
        self.UpdateRole = channel.unary_unary(
                '/role.RoleService/UpdateRole',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleUpdate.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleChangeResponse.FromString,
                _registered_method=True)
        self.DeleteRole = channel.unary_unary(
                '/role.RoleService/DeleteRole',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleId.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleChangeResponse.FromString,
                _registered_method=True)
        self.AddRoleAccess = channel.unary_unary(
                '/role.RoleService/AddRoleAccess',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleAccess.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleChangeResponse.FromString,
                _registered_method=True)
        self.RemoveRoleAccess = channel.unary_unary(
                '/role.RoleService/RemoveRoleAccess',
                request_serializer=rmcs__auth__api_dot_role__pb2.RoleAccess.SerializeToString,
                response_deserializer=rmcs__auth__api_dot_role__pb2.RoleChangeResponse.FromString,
                _registered_method=True)


class RoleServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRoleByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoleByIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoleByApi(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoleByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoleByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRoleOption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRoleAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveRoleAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoleServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadRole': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRole,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleId.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleReadResponse.SerializeToString,
            ),
            'ReadRoleByName': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRoleByName,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleName.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleReadResponse.SerializeToString,
            ),
            'ListRoleByIds': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoleByIds,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleIds.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.SerializeToString,
            ),
            'ListRoleByApi': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoleByApi,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.ApiId.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.SerializeToString,
            ),
            'ListRoleByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoleByUser,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.UserId.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.SerializeToString,
            ),
            'ListRoleByName': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoleByName,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleName.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.SerializeToString,
            ),
            'ListRoleOption': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRoleOption,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleOption.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleListResponse.SerializeToString,
            ),
            'CreateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRole,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleSchema.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleCreateResponse.SerializeToString,
            ),
            'UpdateRole': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRole,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleUpdate.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleChangeResponse.SerializeToString,
            ),
            'DeleteRole': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRole,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleId.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleChangeResponse.SerializeToString,
            ),
            'AddRoleAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRoleAccess,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleAccess.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleChangeResponse.SerializeToString,
            ),
            'RemoveRoleAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveRoleAccess,
                    request_deserializer=rmcs__auth__api_dot_role__pb2.RoleAccess.FromString,
                    response_serializer=rmcs__auth__api_dot_role__pb2.RoleChangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'role.RoleService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('role.RoleService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RoleService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/ReadRole',
            rmcs__auth__api_dot_role__pb2.RoleId.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadRoleByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/ReadRoleByName',
            rmcs__auth__api_dot_role__pb2.RoleName.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoleByIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/ListRoleByIds',
            rmcs__auth__api_dot_role__pb2.RoleIds.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoleByApi(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/ListRoleByApi',
            rmcs__auth__api_dot_role__pb2.ApiId.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoleByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/ListRoleByUser',
            rmcs__auth__api_dot_role__pb2.UserId.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoleByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/ListRoleByName',
            rmcs__auth__api_dot_role__pb2.RoleName.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRoleOption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/ListRoleOption',
            rmcs__auth__api_dot_role__pb2.RoleOption.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/CreateRole',
            rmcs__auth__api_dot_role__pb2.RoleSchema.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/UpdateRole',
            rmcs__auth__api_dot_role__pb2.RoleUpdate.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/DeleteRole',
            rmcs__auth__api_dot_role__pb2.RoleId.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddRoleAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/AddRoleAccess',
            rmcs__auth__api_dot_role__pb2.RoleAccess.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveRoleAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/role.RoleService/RemoveRoleAccess',
            rmcs__auth__api_dot_role__pb2.RoleAccess.SerializeToString,
            rmcs__auth__api_dot_role__pb2.RoleChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
