/**
 * @fileoverview gRPC-Web generated client stub for profile
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_auth_api/profile.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.profile = require('./profile_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.profile.ProfileServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.profile.ProfileServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.ProfileId,
 *   !proto.profile.RoleProfileReadResponse>}
 */
const methodDescriptor_ProfileService_ReadRoleProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/ReadRoleProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.ProfileId,
  proto.profile.RoleProfileReadResponse,
  /**
   * @param {!proto.profile.ProfileId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.RoleProfileReadResponse.deserializeBinary
);


/**
 * @param {!proto.profile.ProfileId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.RoleProfileReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.RoleProfileReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.readRoleProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/ReadRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_ReadRoleProfile,
      callback);
};


/**
 * @param {!proto.profile.ProfileId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.RoleProfileReadResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.readRoleProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/ReadRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_ReadRoleProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.RoleId,
 *   !proto.profile.RoleProfileListResponse>}
 */
const methodDescriptor_ProfileService_ListRoleProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/ListRoleProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.RoleId,
  proto.profile.RoleProfileListResponse,
  /**
   * @param {!proto.profile.RoleId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.RoleProfileListResponse.deserializeBinary
);


/**
 * @param {!proto.profile.RoleId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.RoleProfileListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.RoleProfileListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.listRoleProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/ListRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_ListRoleProfile,
      callback);
};


/**
 * @param {!proto.profile.RoleId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.RoleProfileListResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.listRoleProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/ListRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_ListRoleProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.RoleProfileSchema,
 *   !proto.profile.ProfileCreateResponse>}
 */
const methodDescriptor_ProfileService_CreateRoleProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/CreateRoleProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.RoleProfileSchema,
  proto.profile.ProfileCreateResponse,
  /**
   * @param {!proto.profile.RoleProfileSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.ProfileCreateResponse.deserializeBinary
);


/**
 * @param {!proto.profile.RoleProfileSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.ProfileCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.ProfileCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.createRoleProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/CreateRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_CreateRoleProfile,
      callback);
};


/**
 * @param {!proto.profile.RoleProfileSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.ProfileCreateResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.createRoleProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/CreateRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_CreateRoleProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.RoleProfileUpdate,
 *   !proto.profile.ProfileChangeResponse>}
 */
const methodDescriptor_ProfileService_UpdateRoleProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/UpdateRoleProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.RoleProfileUpdate,
  proto.profile.ProfileChangeResponse,
  /**
   * @param {!proto.profile.RoleProfileUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.ProfileChangeResponse.deserializeBinary
);


/**
 * @param {!proto.profile.RoleProfileUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.ProfileChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.ProfileChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.updateRoleProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/UpdateRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_UpdateRoleProfile,
      callback);
};


/**
 * @param {!proto.profile.RoleProfileUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.ProfileChangeResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.updateRoleProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/UpdateRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_UpdateRoleProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.ProfileId,
 *   !proto.profile.ProfileChangeResponse>}
 */
const methodDescriptor_ProfileService_DeleteRoleProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/DeleteRoleProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.ProfileId,
  proto.profile.ProfileChangeResponse,
  /**
   * @param {!proto.profile.ProfileId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.ProfileChangeResponse.deserializeBinary
);


/**
 * @param {!proto.profile.ProfileId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.ProfileChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.ProfileChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.deleteRoleProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/DeleteRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_DeleteRoleProfile,
      callback);
};


/**
 * @param {!proto.profile.ProfileId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.ProfileChangeResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.deleteRoleProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/DeleteRoleProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_DeleteRoleProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.ProfileId,
 *   !proto.profile.UserProfileReadResponse>}
 */
const methodDescriptor_ProfileService_ReadUserProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/ReadUserProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.ProfileId,
  proto.profile.UserProfileReadResponse,
  /**
   * @param {!proto.profile.ProfileId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.UserProfileReadResponse.deserializeBinary
);


/**
 * @param {!proto.profile.ProfileId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.UserProfileReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.UserProfileReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.readUserProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/ReadUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_ReadUserProfile,
      callback);
};


/**
 * @param {!proto.profile.ProfileId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.UserProfileReadResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.readUserProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/ReadUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_ReadUserProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.UserId,
 *   !proto.profile.UserProfileListResponse>}
 */
const methodDescriptor_ProfileService_ListUserProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/ListUserProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.UserId,
  proto.profile.UserProfileListResponse,
  /**
   * @param {!proto.profile.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.UserProfileListResponse.deserializeBinary
);


/**
 * @param {!proto.profile.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.UserProfileListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.UserProfileListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.listUserProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/ListUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_ListUserProfile,
      callback);
};


/**
 * @param {!proto.profile.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.UserProfileListResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.listUserProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/ListUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_ListUserProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.UserProfileSchema,
 *   !proto.profile.ProfileCreateResponse>}
 */
const methodDescriptor_ProfileService_CreateUserProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/CreateUserProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.UserProfileSchema,
  proto.profile.ProfileCreateResponse,
  /**
   * @param {!proto.profile.UserProfileSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.ProfileCreateResponse.deserializeBinary
);


/**
 * @param {!proto.profile.UserProfileSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.ProfileCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.ProfileCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.createUserProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/CreateUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_CreateUserProfile,
      callback);
};


/**
 * @param {!proto.profile.UserProfileSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.ProfileCreateResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.createUserProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/CreateUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_CreateUserProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.UserProfileUpdate,
 *   !proto.profile.ProfileChangeResponse>}
 */
const methodDescriptor_ProfileService_UpdateUserProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/UpdateUserProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.UserProfileUpdate,
  proto.profile.ProfileChangeResponse,
  /**
   * @param {!proto.profile.UserProfileUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.ProfileChangeResponse.deserializeBinary
);


/**
 * @param {!proto.profile.UserProfileUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.ProfileChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.ProfileChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.updateUserProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/UpdateUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_UpdateUserProfile,
      callback);
};


/**
 * @param {!proto.profile.UserProfileUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.ProfileChangeResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.updateUserProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/UpdateUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_UpdateUserProfile);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.profile.ProfileId,
 *   !proto.profile.ProfileChangeResponse>}
 */
const methodDescriptor_ProfileService_DeleteUserProfile = new grpc.web.MethodDescriptor(
  '/profile.ProfileService/DeleteUserProfile',
  grpc.web.MethodType.UNARY,
  proto.profile.ProfileId,
  proto.profile.ProfileChangeResponse,
  /**
   * @param {!proto.profile.ProfileId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.profile.ProfileChangeResponse.deserializeBinary
);


/**
 * @param {!proto.profile.ProfileId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.profile.ProfileChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.profile.ProfileChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.profile.ProfileServiceClient.prototype.deleteUserProfile =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/profile.ProfileService/DeleteUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_DeleteUserProfile,
      callback);
};


/**
 * @param {!proto.profile.ProfileId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.profile.ProfileChangeResponse>}
 *     Promise that resolves to the response
 */
proto.profile.ProfileServicePromiseClient.prototype.deleteUserProfile =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/profile.ProfileService/DeleteUserProfile',
      request,
      metadata || {},
      methodDescriptor_ProfileService_DeleteUserProfile);
};


module.exports = proto.profile;

