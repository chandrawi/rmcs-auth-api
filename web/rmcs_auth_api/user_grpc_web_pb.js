/**
 * @fileoverview gRPC-Web generated client stub for user
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.27.3
// source: rmcs_auth_api/user.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.user = require('./user_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.user.UserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.user.UserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserId,
 *   !proto.user.UserReadResponse>}
 */
const methodDescriptor_UserService_ReadUser = new grpc.web.MethodDescriptor(
  '/user.UserService/ReadUser',
  grpc.web.MethodType.UNARY,
  proto.user.UserId,
  proto.user.UserReadResponse,
  /**
   * @param {!proto.user.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserReadResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.readUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ReadUser',
      request,
      metadata || {},
      methodDescriptor_UserService_ReadUser,
      callback);
};


/**
 * @param {!proto.user.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserReadResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.readUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ReadUser',
      request,
      metadata || {},
      methodDescriptor_UserService_ReadUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserName,
 *   !proto.user.UserReadResponse>}
 */
const methodDescriptor_UserService_ReadUserByName = new grpc.web.MethodDescriptor(
  '/user.UserService/ReadUserByName',
  grpc.web.MethodType.UNARY,
  proto.user.UserName,
  proto.user.UserReadResponse,
  /**
   * @param {!proto.user.UserName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserReadResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.readUserByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ReadUserByName',
      request,
      metadata || {},
      methodDescriptor_UserService_ReadUserByName,
      callback);
};


/**
 * @param {!proto.user.UserName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserReadResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.readUserByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ReadUserByName',
      request,
      metadata || {},
      methodDescriptor_UserService_ReadUserByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserIds,
 *   !proto.user.UserListResponse>}
 */
const methodDescriptor_UserService_ListUserByIds = new grpc.web.MethodDescriptor(
  '/user.UserService/ListUserByIds',
  grpc.web.MethodType.UNARY,
  proto.user.UserIds,
  proto.user.UserListResponse,
  /**
   * @param {!proto.user.UserIds} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserListResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserIds} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.listUserByIds =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ListUserByIds',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByIds,
      callback);
};


/**
 * @param {!proto.user.UserIds} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserListResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.listUserByIds =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ListUserByIds',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByIds);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.ApiId,
 *   !proto.user.UserListResponse>}
 */
const methodDescriptor_UserService_ListUserByApi = new grpc.web.MethodDescriptor(
  '/user.UserService/ListUserByApi',
  grpc.web.MethodType.UNARY,
  proto.user.ApiId,
  proto.user.UserListResponse,
  /**
   * @param {!proto.user.ApiId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserListResponse.deserializeBinary
);


/**
 * @param {!proto.user.ApiId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.listUserByApi =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ListUserByApi',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByApi,
      callback);
};


/**
 * @param {!proto.user.ApiId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserListResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.listUserByApi =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ListUserByApi',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByApi);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.RoleId,
 *   !proto.user.UserListResponse>}
 */
const methodDescriptor_UserService_ListUserByRole = new grpc.web.MethodDescriptor(
  '/user.UserService/ListUserByRole',
  grpc.web.MethodType.UNARY,
  proto.user.RoleId,
  proto.user.UserListResponse,
  /**
   * @param {!proto.user.RoleId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserListResponse.deserializeBinary
);


/**
 * @param {!proto.user.RoleId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.listUserByRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ListUserByRole',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByRole,
      callback);
};


/**
 * @param {!proto.user.RoleId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserListResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.listUserByRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ListUserByRole',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserName,
 *   !proto.user.UserListResponse>}
 */
const methodDescriptor_UserService_ListUserByName = new grpc.web.MethodDescriptor(
  '/user.UserService/ListUserByName',
  grpc.web.MethodType.UNARY,
  proto.user.UserName,
  proto.user.UserListResponse,
  /**
   * @param {!proto.user.UserName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserListResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.listUserByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ListUserByName',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByName,
      callback);
};


/**
 * @param {!proto.user.UserName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserListResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.listUserByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ListUserByName',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserOption,
 *   !proto.user.UserListResponse>}
 */
const methodDescriptor_UserService_ListUserOption = new grpc.web.MethodDescriptor(
  '/user.UserService/ListUserOption',
  grpc.web.MethodType.UNARY,
  proto.user.UserOption,
  proto.user.UserListResponse,
  /**
   * @param {!proto.user.UserOption} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserListResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserOption} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.listUserOption =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ListUserOption',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserOption,
      callback);
};


/**
 * @param {!proto.user.UserOption} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserListResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.listUserOption =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ListUserOption',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserOption);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserSchema,
 *   !proto.user.UserCreateResponse>}
 */
const methodDescriptor_UserService_CreateUser = new grpc.web.MethodDescriptor(
  '/user.UserService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.user.UserSchema,
  proto.user.UserCreateResponse,
  /**
   * @param {!proto.user.UserSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserCreateResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser,
      callback);
};


/**
 * @param {!proto.user.UserSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserCreateResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserUpdate,
 *   !proto.user.UserChangeResponse>}
 */
const methodDescriptor_UserService_UpdateUser = new grpc.web.MethodDescriptor(
  '/user.UserService/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.user.UserUpdate,
  proto.user.UserChangeResponse,
  /**
   * @param {!proto.user.UserUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserChangeResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser,
      callback);
};


/**
 * @param {!proto.user.UserUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserChangeResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserId,
 *   !proto.user.UserChangeResponse>}
 */
const methodDescriptor_UserService_DeleteUser = new grpc.web.MethodDescriptor(
  '/user.UserService/DeleteUser',
  grpc.web.MethodType.UNARY,
  proto.user.UserId,
  proto.user.UserChangeResponse,
  /**
   * @param {!proto.user.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserChangeResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.deleteUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/DeleteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_DeleteUser,
      callback);
};


/**
 * @param {!proto.user.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserChangeResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.deleteUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/DeleteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_DeleteUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserRole,
 *   !proto.user.UserChangeResponse>}
 */
const methodDescriptor_UserService_AddUserRole = new grpc.web.MethodDescriptor(
  '/user.UserService/AddUserRole',
  grpc.web.MethodType.UNARY,
  proto.user.UserRole,
  proto.user.UserChangeResponse,
  /**
   * @param {!proto.user.UserRole} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserChangeResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserRole} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.addUserRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/AddUserRole',
      request,
      metadata || {},
      methodDescriptor_UserService_AddUserRole,
      callback);
};


/**
 * @param {!proto.user.UserRole} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserChangeResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.addUserRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/AddUserRole',
      request,
      metadata || {},
      methodDescriptor_UserService_AddUserRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserRole,
 *   !proto.user.UserChangeResponse>}
 */
const methodDescriptor_UserService_RemoveUserRole = new grpc.web.MethodDescriptor(
  '/user.UserService/RemoveUserRole',
  grpc.web.MethodType.UNARY,
  proto.user.UserRole,
  proto.user.UserChangeResponse,
  /**
   * @param {!proto.user.UserRole} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.user.UserChangeResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserRole} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.user.UserServiceClient.prototype.removeUserRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/RemoveUserRole',
      request,
      metadata || {},
      methodDescriptor_UserService_RemoveUserRole,
      callback);
};


/**
 * @param {!proto.user.UserRole} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserChangeResponse>}
 *     Promise that resolves to the response
 */
proto.user.UserServicePromiseClient.prototype.removeUserRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/RemoveUserRole',
      request,
      metadata || {},
      methodDescriptor_UserService_RemoveUserRole);
};


module.exports = proto.user;

