import require$$0$1 from 'grpc-web';
import require$$0 from 'google-protobuf';

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var api_pb = {};

(function (exports) {
	// source: rmcs_auth_api/api.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.api.ApiCategory', null, global);
	goog.exportSymbol('proto.api.ApiChangeResponse', null, global);
	goog.exportSymbol('proto.api.ApiCreateResponse', null, global);
	goog.exportSymbol('proto.api.ApiId', null, global);
	goog.exportSymbol('proto.api.ApiListResponse', null, global);
	goog.exportSymbol('proto.api.ApiName', null, global);
	goog.exportSymbol('proto.api.ApiReadResponse', null, global);
	goog.exportSymbol('proto.api.ApiSchema', null, global);
	goog.exportSymbol('proto.api.ApiUpdate', null, global);
	goog.exportSymbol('proto.api.ProcedureChangeResponse', null, global);
	goog.exportSymbol('proto.api.ProcedureCreateResponse', null, global);
	goog.exportSymbol('proto.api.ProcedureId', null, global);
	goog.exportSymbol('proto.api.ProcedureListResponse', null, global);
	goog.exportSymbol('proto.api.ProcedureName', null, global);
	goog.exportSymbol('proto.api.ProcedureReadResponse', null, global);
	goog.exportSymbol('proto.api.ProcedureSchema', null, global);
	goog.exportSymbol('proto.api.ProcedureUpdate', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ApiSchema.repeatedFields_, null);
	};
	goog.inherits(proto.api.ApiSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiSchema.displayName = 'proto.api.ApiSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ApiId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiId.displayName = 'proto.api.ApiId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ApiName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiName.displayName = 'proto.api.ApiName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiCategory = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ApiCategory, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiCategory.displayName = 'proto.api.ApiCategory';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ApiUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiUpdate.displayName = 'proto.api.ApiUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ProcedureSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ProcedureSchema.repeatedFields_, null);
	};
	goog.inherits(proto.api.ProcedureSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ProcedureSchema.displayName = 'proto.api.ProcedureSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ProcedureId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ProcedureId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ProcedureId.displayName = 'proto.api.ProcedureId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ProcedureName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ProcedureName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ProcedureName.displayName = 'proto.api.ProcedureName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ProcedureUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ProcedureUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ProcedureUpdate.displayName = 'proto.api.ProcedureUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ApiReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiReadResponse.displayName = 'proto.api.ApiReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ApiListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.api.ApiListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiListResponse.displayName = 'proto.api.ApiListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ApiCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiCreateResponse.displayName = 'proto.api.ApiCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ApiChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ApiChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ApiChangeResponse.displayName = 'proto.api.ApiChangeResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ProcedureReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ProcedureReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ProcedureReadResponse.displayName = 'proto.api.ProcedureReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ProcedureListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ProcedureListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.api.ProcedureListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ProcedureListResponse.displayName = 'proto.api.ProcedureListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ProcedureCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ProcedureCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ProcedureCreateResponse.displayName = 'proto.api.ProcedureCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.api.ProcedureChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.api.ProcedureChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.api.ProcedureChangeResponse.displayName = 'proto.api.ProcedureChangeResponse';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.api.ApiSchema.repeatedFields_ = [8];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    category: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
	    password: jspb.Message.getFieldWithDefault(msg, 6, ""),
	    accessKey: msg.getAccessKey_asB64(),
	    proceduresList: jspb.Message.toObjectList(msg.getProceduresList(),
	    proto.api.ProcedureSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiSchema}
	 */
	proto.api.ApiSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiSchema;
	  return proto.api.ApiSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiSchema}
	 */
	proto.api.ApiSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAddress(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 6:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setPassword(value);
	      break;
	    case 7:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAccessKey(value);
	      break;
	    case 8:
	      var value = new proto.api.ProcedureSchema;
	      reader.readMessage(value,proto.api.ProcedureSchema.deserializeBinaryFromReader);
	      msg.addProcedures(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getAddress();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	  f = message.getPassword();
	  if (f.length > 0) {
	    writer.writeString(
	      6,
	      f
	    );
	  }
	  f = message.getAccessKey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      7,
	      f
	    );
	  }
	  f = message.getProceduresList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      8,
	      f,
	      proto.api.ProcedureSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ApiSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.api.ApiSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ApiSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ApiSchema} returns this
	 */
	proto.api.ApiSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.api.ApiSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiSchema} returns this
	 */
	proto.api.ApiSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string address = 3;
	 * @return {string}
	 */
	proto.api.ApiSchema.prototype.getAddress = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiSchema} returns this
	 */
	proto.api.ApiSchema.prototype.setAddress = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string category = 4;
	 * @return {string}
	 */
	proto.api.ApiSchema.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiSchema} returns this
	 */
	proto.api.ApiSchema.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * optional string description = 5;
	 * @return {string}
	 */
	proto.api.ApiSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiSchema} returns this
	 */
	proto.api.ApiSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 5, value);
	};


	/**
	 * optional string password = 6;
	 * @return {string}
	 */
	proto.api.ApiSchema.prototype.getPassword = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiSchema} returns this
	 */
	proto.api.ApiSchema.prototype.setPassword = function(value) {
	  return jspb.Message.setProto3StringField(this, 6, value);
	};


	/**
	 * optional bytes access_key = 7;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ApiSchema.prototype.getAccessKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
	};


	/**
	 * optional bytes access_key = 7;
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {string}
	 */
	proto.api.ApiSchema.prototype.getAccessKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getAccessKey()));
	};


	/**
	 * optional bytes access_key = 7;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {!Uint8Array}
	 */
	proto.api.ApiSchema.prototype.getAccessKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getAccessKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ApiSchema} returns this
	 */
	proto.api.ApiSchema.prototype.setAccessKey = function(value) {
	  return jspb.Message.setProto3BytesField(this, 7, value);
	};


	/**
	 * repeated ProcedureSchema procedures = 8;
	 * @return {!Array<!proto.api.ProcedureSchema>}
	 */
	proto.api.ApiSchema.prototype.getProceduresList = function() {
	  return /** @type{!Array<!proto.api.ProcedureSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.api.ProcedureSchema, 8));
	};


	/**
	 * @param {!Array<!proto.api.ProcedureSchema>} value
	 * @return {!proto.api.ApiSchema} returns this
	*/
	proto.api.ApiSchema.prototype.setProceduresList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 8, value);
	};


	/**
	 * @param {!proto.api.ProcedureSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.api.ProcedureSchema}
	 */
	proto.api.ApiSchema.prototype.addProcedures = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.api.ProcedureSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.api.ApiSchema} returns this
	 */
	proto.api.ApiSchema.prototype.clearProceduresList = function() {
	  return this.setProceduresList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiId.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiId.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiId}
	 */
	proto.api.ApiId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiId;
	  return proto.api.ApiId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiId}
	 */
	proto.api.ApiId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ApiId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.api.ApiId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ApiId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ApiId} returns this
	 */
	proto.api.ApiId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiName.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiName.toObject = function(includeInstance, msg) {
	  var obj = {
	    name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiName}
	 */
	proto.api.ApiName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiName;
	  return proto.api.ApiName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiName}
	 */
	proto.api.ApiName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.api.ApiName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiName} returns this
	 */
	proto.api.ApiName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiCategory.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiCategory.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiCategory} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiCategory.toObject = function(includeInstance, msg) {
	  var obj = {
	    category: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiCategory}
	 */
	proto.api.ApiCategory.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiCategory;
	  return proto.api.ApiCategory.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiCategory} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiCategory}
	 */
	proto.api.ApiCategory.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiCategory.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiCategory.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiCategory} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiCategory.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getCategory();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string category = 1;
	 * @return {string}
	 */
	proto.api.ApiCategory.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiCategory} returns this
	 */
	proto.api.ApiCategory.prototype.setCategory = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiUpdate.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    category: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    description: jspb.Message.getFieldWithDefault(msg, 5, ""),
	    password: jspb.Message.getFieldWithDefault(msg, 6, ""),
	    accessKey: msg.getAccessKey_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiUpdate}
	 */
	proto.api.ApiUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiUpdate;
	  return proto.api.ApiUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiUpdate}
	 */
	proto.api.ApiUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAddress(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setCategory(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 6:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setPassword(value);
	      break;
	    case 7:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAccessKey(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 6));
	  if (f != null) {
	    writer.writeString(
	      6,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
	  if (f != null) {
	    writer.writeBytes(
	      7,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ApiUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.api.ApiUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ApiUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.api.ApiUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ApiUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string address = 3;
	 * @return {string}
	 */
	proto.api.ApiUpdate.prototype.getAddress = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.setAddress = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.clearAddress = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ApiUpdate.prototype.hasAddress = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string category = 4;
	 * @return {string}
	 */
	proto.api.ApiUpdate.prototype.getCategory = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.setCategory = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.clearCategory = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ApiUpdate.prototype.hasCategory = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional string description = 5;
	 * @return {string}
	 */
	proto.api.ApiUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ApiUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 5) != null;
	};


	/**
	 * optional string password = 6;
	 * @return {string}
	 */
	proto.api.ApiUpdate.prototype.getPassword = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.setPassword = function(value) {
	  return jspb.Message.setField(this, 6, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.clearPassword = function() {
	  return jspb.Message.setField(this, 6, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ApiUpdate.prototype.hasPassword = function() {
	  return jspb.Message.getField(this, 6) != null;
	};


	/**
	 * optional bytes access_key = 7;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ApiUpdate.prototype.getAccessKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
	};


	/**
	 * optional bytes access_key = 7;
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {string}
	 */
	proto.api.ApiUpdate.prototype.getAccessKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getAccessKey()));
	};


	/**
	 * optional bytes access_key = 7;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {!Uint8Array}
	 */
	proto.api.ApiUpdate.prototype.getAccessKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getAccessKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.setAccessKey = function(value) {
	  return jspb.Message.setField(this, 7, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.api.ApiUpdate} returns this
	 */
	proto.api.ApiUpdate.prototype.clearAccessKey = function() {
	  return jspb.Message.setField(this, 7, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ApiUpdate.prototype.hasAccessKey = function() {
	  return jspb.Message.getField(this, 7) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.api.ProcedureSchema.repeatedFields_ = [5];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ProcedureSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ProcedureSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ProcedureSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureSchema.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    id: msg.getId_asB64(),
	    apiId: msg.getApiId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    rolesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ProcedureSchema}
	 */
	proto.api.ProcedureSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ProcedureSchema;
	  return proto.api.ProcedureSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ProcedureSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ProcedureSchema}
	 */
	proto.api.ProcedureSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.addRoles(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ProcedureSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ProcedureSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getDescription();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getRolesList();
	  if (f.length > 0) {
	    writer.writeRepeatedString(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ProcedureSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.api.ProcedureSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ProcedureSchema} returns this
	 */
	proto.api.ProcedureSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes api_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ProcedureSchema.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes api_id = 2;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.api.ProcedureSchema.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureSchema.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ProcedureSchema} returns this
	 */
	proto.api.ProcedureSchema.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.api.ProcedureSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ProcedureSchema} returns this
	 */
	proto.api.ProcedureSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string description = 4;
	 * @return {string}
	 */
	proto.api.ProcedureSchema.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ProcedureSchema} returns this
	 */
	proto.api.ProcedureSchema.prototype.setDescription = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * repeated string roles = 5;
	 * @return {!Array<string>}
	 */
	proto.api.ProcedureSchema.prototype.getRolesList = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
	};


	/**
	 * @param {!Array<string>} value
	 * @return {!proto.api.ProcedureSchema} returns this
	 */
	proto.api.ProcedureSchema.prototype.setRolesList = function(value) {
	  return jspb.Message.setField(this, 5, value || []);
	};


	/**
	 * @param {string} value
	 * @param {number=} opt_index
	 * @return {!proto.api.ProcedureSchema} returns this
	 */
	proto.api.ProcedureSchema.prototype.addRoles = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.api.ProcedureSchema} returns this
	 */
	proto.api.ProcedureSchema.prototype.clearRolesList = function() {
	  return this.setRolesList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ProcedureId.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ProcedureId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ProcedureId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureId.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ProcedureId}
	 */
	proto.api.ProcedureId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ProcedureId;
	  return proto.api.ProcedureId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ProcedureId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ProcedureId}
	 */
	proto.api.ProcedureId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ProcedureId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ProcedureId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ProcedureId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.api.ProcedureId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ProcedureId} returns this
	 */
	proto.api.ProcedureId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ProcedureName.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ProcedureName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ProcedureName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureName.toObject = function(includeInstance, msg) {
	  var obj = {
	    apiId: msg.getApiId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 3, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ProcedureName}
	 */
	proto.api.ProcedureName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ProcedureName;
	  return proto.api.ProcedureName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ProcedureName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ProcedureName}
	 */
	proto.api.ProcedureName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ProcedureName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ProcedureName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes api_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ProcedureName.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes api_id = 1;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.api.ProcedureName.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureName.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ProcedureName} returns this
	 */
	proto.api.ProcedureName.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.api.ProcedureName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ProcedureName} returns this
	 */
	proto.api.ProcedureName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ProcedureUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ProcedureUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ProcedureUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureUpdate.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    description: jspb.Message.getFieldWithDefault(msg, 3, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ProcedureUpdate}
	 */
	proto.api.ProcedureUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ProcedureUpdate;
	  return proto.api.ProcedureUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ProcedureUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ProcedureUpdate}
	 */
	proto.api.ProcedureUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setDescription(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ProcedureUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ProcedureUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ProcedureUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.api.ProcedureUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ProcedureUpdate} returns this
	 */
	proto.api.ProcedureUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.api.ProcedureUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ProcedureUpdate} returns this
	 */
	proto.api.ProcedureUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.api.ProcedureUpdate} returns this
	 */
	proto.api.ProcedureUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ProcedureUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string description = 3;
	 * @return {string}
	 */
	proto.api.ProcedureUpdate.prototype.getDescription = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.api.ProcedureUpdate} returns this
	 */
	proto.api.ProcedureUpdate.prototype.setDescription = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.api.ProcedureUpdate} returns this
	 */
	proto.api.ProcedureUpdate.prototype.clearDescription = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ProcedureUpdate.prototype.hasDescription = function() {
	  return jspb.Message.getField(this, 3) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    result: (f = msg.getResult()) && proto.api.ApiSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiReadResponse}
	 */
	proto.api.ApiReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiReadResponse;
	  return proto.api.ApiReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiReadResponse}
	 */
	proto.api.ApiReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.api.ApiSchema;
	      reader.readMessage(value,proto.api.ApiSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.api.ApiSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional ApiSchema result = 1;
	 * @return {?proto.api.ApiSchema}
	 */
	proto.api.ApiReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.api.ApiSchema} */ (
	    jspb.Message.getWrapperField(this, proto.api.ApiSchema, 1));
	};


	/**
	 * @param {?proto.api.ApiSchema|undefined} value
	 * @return {!proto.api.ApiReadResponse} returns this
	*/
	proto.api.ApiReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.api.ApiReadResponse} returns this
	 */
	proto.api.ApiReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ApiReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.api.ApiListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.api.ApiSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiListResponse}
	 */
	proto.api.ApiListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiListResponse;
	  return proto.api.ApiListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiListResponse}
	 */
	proto.api.ApiListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.api.ApiSchema;
	      reader.readMessage(value,proto.api.ApiSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.api.ApiSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated ApiSchema results = 1;
	 * @return {!Array<!proto.api.ApiSchema>}
	 */
	proto.api.ApiListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.api.ApiSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.api.ApiSchema, 1));
	};


	/**
	 * @param {!Array<!proto.api.ApiSchema>} value
	 * @return {!proto.api.ApiListResponse} returns this
	*/
	proto.api.ApiListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.api.ApiSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.api.ApiSchema}
	 */
	proto.api.ApiListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.ApiSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.api.ApiListResponse} returns this
	 */
	proto.api.ApiListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiCreateResponse}
	 */
	proto.api.ApiCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiCreateResponse;
	  return proto.api.ApiCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiCreateResponse}
	 */
	proto.api.ApiCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ApiCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.api.ApiCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ApiCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ApiCreateResponse} returns this
	 */
	proto.api.ApiCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ApiChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ApiChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ApiChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ApiChangeResponse}
	 */
	proto.api.ApiChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ApiChangeResponse;
	  return proto.api.ApiChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ApiChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ApiChangeResponse}
	 */
	proto.api.ApiChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ApiChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ApiChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ApiChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ApiChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ProcedureReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ProcedureReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ProcedureReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    result: (f = msg.getResult()) && proto.api.ProcedureSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ProcedureReadResponse}
	 */
	proto.api.ProcedureReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ProcedureReadResponse;
	  return proto.api.ProcedureReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ProcedureReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ProcedureReadResponse}
	 */
	proto.api.ProcedureReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.api.ProcedureSchema;
	      reader.readMessage(value,proto.api.ProcedureSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ProcedureReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ProcedureReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.api.ProcedureSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional ProcedureSchema result = 1;
	 * @return {?proto.api.ProcedureSchema}
	 */
	proto.api.ProcedureReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.api.ProcedureSchema} */ (
	    jspb.Message.getWrapperField(this, proto.api.ProcedureSchema, 1));
	};


	/**
	 * @param {?proto.api.ProcedureSchema|undefined} value
	 * @return {!proto.api.ProcedureReadResponse} returns this
	*/
	proto.api.ProcedureReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.api.ProcedureReadResponse} returns this
	 */
	proto.api.ProcedureReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.api.ProcedureReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.api.ProcedureListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ProcedureListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ProcedureListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ProcedureListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.api.ProcedureSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ProcedureListResponse}
	 */
	proto.api.ProcedureListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ProcedureListResponse;
	  return proto.api.ProcedureListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ProcedureListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ProcedureListResponse}
	 */
	proto.api.ProcedureListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.api.ProcedureSchema;
	      reader.readMessage(value,proto.api.ProcedureSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ProcedureListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ProcedureListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.api.ProcedureSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated ProcedureSchema results = 1;
	 * @return {!Array<!proto.api.ProcedureSchema>}
	 */
	proto.api.ProcedureListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.api.ProcedureSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.api.ProcedureSchema, 1));
	};


	/**
	 * @param {!Array<!proto.api.ProcedureSchema>} value
	 * @return {!proto.api.ProcedureListResponse} returns this
	*/
	proto.api.ProcedureListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.api.ProcedureSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.api.ProcedureSchema}
	 */
	proto.api.ProcedureListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.api.ProcedureSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.api.ProcedureListResponse} returns this
	 */
	proto.api.ProcedureListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ProcedureCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ProcedureCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ProcedureCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ProcedureCreateResponse}
	 */
	proto.api.ProcedureCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ProcedureCreateResponse;
	  return proto.api.ProcedureCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ProcedureCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ProcedureCreateResponse}
	 */
	proto.api.ProcedureCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ProcedureCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ProcedureCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.api.ProcedureCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.api.ProcedureCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.api.ProcedureCreateResponse} returns this
	 */
	proto.api.ProcedureCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.api.ProcedureChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.api.ProcedureChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.api.ProcedureChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.api.ProcedureChangeResponse}
	 */
	proto.api.ProcedureChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.api.ProcedureChangeResponse;
	  return proto.api.ProcedureChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.api.ProcedureChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.api.ProcedureChangeResponse}
	 */
	proto.api.ProcedureChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.api.ProcedureChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.api.ProcedureChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.api.ProcedureChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.api.ProcedureChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.api); 
} (api_pb));

/**
 * @fileoverview gRPC-Web generated client stub for api
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: rmcs_auth_api/api.proto


/* eslint-disable */
// @ts-nocheck



const grpc$4 = {};
grpc$4.web = require$$0$1;

const proto$5 = {};
proto$5.api = api_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$5.api.ApiServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$4.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$5.api.ApiServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$4.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ApiId,
 *   !proto.api.ApiReadResponse>}
 */
const methodDescriptor_ApiService_ReadApi = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/ReadApi',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ApiId,
  proto$5.api.ApiReadResponse,
  /**
   * @param {!proto.api.ApiId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ApiReadResponse.deserializeBinary
);


/**
 * @param {!proto.api.ApiId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ApiReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ApiReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.readApi =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/ReadApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_ReadApi,
      callback);
};


/**
 * @param {!proto.api.ApiId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ApiReadResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.readApi =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/ReadApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_ReadApi);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ApiName,
 *   !proto.api.ApiReadResponse>}
 */
const methodDescriptor_ApiService_ReadApiByName = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/ReadApiByName',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ApiName,
  proto$5.api.ApiReadResponse,
  /**
   * @param {!proto.api.ApiName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ApiReadResponse.deserializeBinary
);


/**
 * @param {!proto.api.ApiName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ApiReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ApiReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.readApiByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/ReadApiByName',
      request,
      metadata || {},
      methodDescriptor_ApiService_ReadApiByName,
      callback);
};


/**
 * @param {!proto.api.ApiName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ApiReadResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.readApiByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/ReadApiByName',
      request,
      metadata || {},
      methodDescriptor_ApiService_ReadApiByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ApiCategory,
 *   !proto.api.ApiListResponse>}
 */
const methodDescriptor_ApiService_ListApiByCategory = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/ListApiByCategory',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ApiCategory,
  proto$5.api.ApiListResponse,
  /**
   * @param {!proto.api.ApiCategory} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ApiListResponse.deserializeBinary
);


/**
 * @param {!proto.api.ApiCategory} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ApiListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ApiListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.listApiByCategory =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/ListApiByCategory',
      request,
      metadata || {},
      methodDescriptor_ApiService_ListApiByCategory,
      callback);
};


/**
 * @param {!proto.api.ApiCategory} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ApiListResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.listApiByCategory =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/ListApiByCategory',
      request,
      metadata || {},
      methodDescriptor_ApiService_ListApiByCategory);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ApiSchema,
 *   !proto.api.ApiCreateResponse>}
 */
const methodDescriptor_ApiService_CreateApi = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/CreateApi',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ApiSchema,
  proto$5.api.ApiCreateResponse,
  /**
   * @param {!proto.api.ApiSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ApiCreateResponse.deserializeBinary
);


/**
 * @param {!proto.api.ApiSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ApiCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ApiCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.createApi =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/CreateApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_CreateApi,
      callback);
};


/**
 * @param {!proto.api.ApiSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ApiCreateResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.createApi =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/CreateApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_CreateApi);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ApiUpdate,
 *   !proto.api.ApiChangeResponse>}
 */
const methodDescriptor_ApiService_UpdateApi = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/UpdateApi',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ApiUpdate,
  proto$5.api.ApiChangeResponse,
  /**
   * @param {!proto.api.ApiUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ApiChangeResponse.deserializeBinary
);


/**
 * @param {!proto.api.ApiUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ApiChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ApiChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.updateApi =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/UpdateApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_UpdateApi,
      callback);
};


/**
 * @param {!proto.api.ApiUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ApiChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.updateApi =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/UpdateApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_UpdateApi);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ApiId,
 *   !proto.api.ApiChangeResponse>}
 */
const methodDescriptor_ApiService_DeleteApi = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/DeleteApi',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ApiId,
  proto$5.api.ApiChangeResponse,
  /**
   * @param {!proto.api.ApiId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ApiChangeResponse.deserializeBinary
);


/**
 * @param {!proto.api.ApiId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ApiChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ApiChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.deleteApi =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/DeleteApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_DeleteApi,
      callback);
};


/**
 * @param {!proto.api.ApiId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ApiChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.deleteApi =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/DeleteApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_DeleteApi);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ProcedureId,
 *   !proto.api.ProcedureReadResponse>}
 */
const methodDescriptor_ApiService_ReadProcedure = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/ReadProcedure',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ProcedureId,
  proto$5.api.ProcedureReadResponse,
  /**
   * @param {!proto.api.ProcedureId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ProcedureReadResponse.deserializeBinary
);


/**
 * @param {!proto.api.ProcedureId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ProcedureReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ProcedureReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.readProcedure =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/ReadProcedure',
      request,
      metadata || {},
      methodDescriptor_ApiService_ReadProcedure,
      callback);
};


/**
 * @param {!proto.api.ProcedureId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ProcedureReadResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.readProcedure =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/ReadProcedure',
      request,
      metadata || {},
      methodDescriptor_ApiService_ReadProcedure);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ProcedureName,
 *   !proto.api.ProcedureReadResponse>}
 */
const methodDescriptor_ApiService_ReadProcedureByName = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/ReadProcedureByName',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ProcedureName,
  proto$5.api.ProcedureReadResponse,
  /**
   * @param {!proto.api.ProcedureName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ProcedureReadResponse.deserializeBinary
);


/**
 * @param {!proto.api.ProcedureName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ProcedureReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ProcedureReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.readProcedureByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/ReadProcedureByName',
      request,
      metadata || {},
      methodDescriptor_ApiService_ReadProcedureByName,
      callback);
};


/**
 * @param {!proto.api.ProcedureName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ProcedureReadResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.readProcedureByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/ReadProcedureByName',
      request,
      metadata || {},
      methodDescriptor_ApiService_ReadProcedureByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ApiId,
 *   !proto.api.ProcedureListResponse>}
 */
const methodDescriptor_ApiService_ListProcedureByApi = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/ListProcedureByApi',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ApiId,
  proto$5.api.ProcedureListResponse,
  /**
   * @param {!proto.api.ApiId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ProcedureListResponse.deserializeBinary
);


/**
 * @param {!proto.api.ApiId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ProcedureListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ProcedureListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.listProcedureByApi =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/ListProcedureByApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_ListProcedureByApi,
      callback);
};


/**
 * @param {!proto.api.ApiId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ProcedureListResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.listProcedureByApi =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/ListProcedureByApi',
      request,
      metadata || {},
      methodDescriptor_ApiService_ListProcedureByApi);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ProcedureSchema,
 *   !proto.api.ProcedureCreateResponse>}
 */
const methodDescriptor_ApiService_CreateProcedure = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/CreateProcedure',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ProcedureSchema,
  proto$5.api.ProcedureCreateResponse,
  /**
   * @param {!proto.api.ProcedureSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ProcedureCreateResponse.deserializeBinary
);


/**
 * @param {!proto.api.ProcedureSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ProcedureCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ProcedureCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.createProcedure =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/CreateProcedure',
      request,
      metadata || {},
      methodDescriptor_ApiService_CreateProcedure,
      callback);
};


/**
 * @param {!proto.api.ProcedureSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ProcedureCreateResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.createProcedure =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/CreateProcedure',
      request,
      metadata || {},
      methodDescriptor_ApiService_CreateProcedure);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ProcedureUpdate,
 *   !proto.api.ProcedureChangeResponse>}
 */
const methodDescriptor_ApiService_UpdateProcedure = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/UpdateProcedure',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ProcedureUpdate,
  proto$5.api.ProcedureChangeResponse,
  /**
   * @param {!proto.api.ProcedureUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ProcedureChangeResponse.deserializeBinary
);


/**
 * @param {!proto.api.ProcedureUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ProcedureChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ProcedureChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.updateProcedure =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/UpdateProcedure',
      request,
      metadata || {},
      methodDescriptor_ApiService_UpdateProcedure,
      callback);
};


/**
 * @param {!proto.api.ProcedureUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ProcedureChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.updateProcedure =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/UpdateProcedure',
      request,
      metadata || {},
      methodDescriptor_ApiService_UpdateProcedure);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.api.ProcedureId,
 *   !proto.api.ProcedureChangeResponse>}
 */
const methodDescriptor_ApiService_DeleteProcedure = new grpc$4.web.MethodDescriptor(
  '/api.ApiService/DeleteProcedure',
  grpc$4.web.MethodType.UNARY,
  proto$5.api.ProcedureId,
  proto$5.api.ProcedureChangeResponse,
  /**
   * @param {!proto.api.ProcedureId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$5.api.ProcedureChangeResponse.deserializeBinary
);


/**
 * @param {!proto.api.ProcedureId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.api.ProcedureChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.api.ProcedureChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$5.api.ApiServiceClient.prototype.deleteProcedure =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/api.ApiService/DeleteProcedure',
      request,
      metadata || {},
      methodDescriptor_ApiService_DeleteProcedure,
      callback);
};


/**
 * @param {!proto.api.ProcedureId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.api.ProcedureChangeResponse>}
 *     Promise that resolves to the response
 */
proto$5.api.ApiServicePromiseClient.prototype.deleteProcedure =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/api.ApiService/DeleteProcedure',
      request,
      metadata || {},
      methodDescriptor_ApiService_DeleteProcedure);
};


var api_grpc_web_pb = proto$5.api;

var api_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(api_grpc_web_pb);

var role_pb = {};

(function (exports) {
	// source: rmcs_auth_api/role.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.role.ApiId', null, global);
	goog.exportSymbol('proto.role.RoleAccess', null, global);
	goog.exportSymbol('proto.role.RoleChangeResponse', null, global);
	goog.exportSymbol('proto.role.RoleCreateResponse', null, global);
	goog.exportSymbol('proto.role.RoleId', null, global);
	goog.exportSymbol('proto.role.RoleListResponse', null, global);
	goog.exportSymbol('proto.role.RoleName', null, global);
	goog.exportSymbol('proto.role.RoleReadResponse', null, global);
	goog.exportSymbol('proto.role.RoleSchema', null, global);
	goog.exportSymbol('proto.role.RoleUpdate', null, global);
	goog.exportSymbol('proto.role.UserId', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.role.RoleSchema.repeatedFields_, null);
	};
	goog.inherits(proto.role.RoleSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleSchema.displayName = 'proto.role.RoleSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.RoleId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleId.displayName = 'proto.role.RoleId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.RoleName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleName.displayName = 'proto.role.RoleName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.ApiId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.ApiId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.ApiId.displayName = 'proto.role.ApiId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.UserId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.UserId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.UserId.displayName = 'proto.role.UserId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.RoleUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleUpdate.displayName = 'proto.role.RoleUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleAccess = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.RoleAccess, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleAccess.displayName = 'proto.role.RoleAccess';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.RoleReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleReadResponse.displayName = 'proto.role.RoleReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.role.RoleListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.role.RoleListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleListResponse.displayName = 'proto.role.RoleListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.RoleCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleCreateResponse.displayName = 'proto.role.RoleCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.role.RoleChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.role.RoleChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.role.RoleChangeResponse.displayName = 'proto.role.RoleChangeResponse';
	}

	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.role.RoleSchema.repeatedFields_ = [9];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64(),
	    apiId: msg.getApiId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    multi: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
	    ipLock: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
	    accessDuration: jspb.Message.getFieldWithDefault(msg, 6, 0),
	    refreshDuration: jspb.Message.getFieldWithDefault(msg, 7, 0),
	    accessKey: msg.getAccessKey_asB64(),
	    proceduresList: msg.getProceduresList_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleSchema}
	 */
	proto.role.RoleSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleSchema;
	  return proto.role.RoleSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleSchema}
	 */
	proto.role.RoleSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 4:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setMulti(value);
	      break;
	    case 5:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setIpLock(value);
	      break;
	    case 6:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setAccessDuration(value);
	      break;
	    case 7:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setRefreshDuration(value);
	      break;
	    case 8:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAccessKey(value);
	      break;
	    case 9:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.addProcedures(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getMulti();
	  if (f) {
	    writer.writeBool(
	      4,
	      f
	    );
	  }
	  f = message.getIpLock();
	  if (f) {
	    writer.writeBool(
	      5,
	      f
	    );
	  }
	  f = message.getAccessDuration();
	  if (f !== 0) {
	    writer.writeInt32(
	      6,
	      f
	    );
	  }
	  f = message.getRefreshDuration();
	  if (f !== 0) {
	    writer.writeInt32(
	      7,
	      f
	    );
	  }
	  f = message.getAccessKey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      8,
	      f
	    );
	  }
	  f = message.getProceduresList_asU8();
	  if (f.length > 0) {
	    writer.writeRepeatedBytes(
	      9,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.role.RoleSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes api_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleSchema.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes api_id = 2;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.role.RoleSchema.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleSchema.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional string name = 3;
	 * @return {string}
	 */
	proto.role.RoleSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional bool multi = 4;
	 * @return {boolean}
	 */
	proto.role.RoleSchema.prototype.getMulti = function() {
	  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
	};


	/**
	 * @param {boolean} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setMulti = function(value) {
	  return jspb.Message.setProto3BooleanField(this, 4, value);
	};


	/**
	 * optional bool ip_lock = 5;
	 * @return {boolean}
	 */
	proto.role.RoleSchema.prototype.getIpLock = function() {
	  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
	};


	/**
	 * @param {boolean} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setIpLock = function(value) {
	  return jspb.Message.setProto3BooleanField(this, 5, value);
	};


	/**
	 * optional int32 access_duration = 6;
	 * @return {number}
	 */
	proto.role.RoleSchema.prototype.getAccessDuration = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setAccessDuration = function(value) {
	  return jspb.Message.setProto3IntField(this, 6, value);
	};


	/**
	 * optional int32 refresh_duration = 7;
	 * @return {number}
	 */
	proto.role.RoleSchema.prototype.getRefreshDuration = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setRefreshDuration = function(value) {
	  return jspb.Message.setProto3IntField(this, 7, value);
	};


	/**
	 * optional bytes access_key = 8;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleSchema.prototype.getAccessKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
	};


	/**
	 * optional bytes access_key = 8;
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {string}
	 */
	proto.role.RoleSchema.prototype.getAccessKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getAccessKey()));
	};


	/**
	 * optional bytes access_key = 8;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleSchema.prototype.getAccessKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getAccessKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setAccessKey = function(value) {
	  return jspb.Message.setProto3BytesField(this, 8, value);
	};


	/**
	 * repeated bytes procedures = 9;
	 * @return {!(Array<!Uint8Array>|Array<string>)}
	 */
	proto.role.RoleSchema.prototype.getProceduresList = function() {
	  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 9));
	};


	/**
	 * repeated bytes procedures = 9;
	 * This is a type-conversion wrapper around `getProceduresList()`
	 * @return {!Array<string>}
	 */
	proto.role.RoleSchema.prototype.getProceduresList_asB64 = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
	      this.getProceduresList()));
	};


	/**
	 * repeated bytes procedures = 9;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getProceduresList()`
	 * @return {!Array<!Uint8Array>}
	 */
	proto.role.RoleSchema.prototype.getProceduresList_asU8 = function() {
	  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
	      this.getProceduresList()));
	};


	/**
	 * @param {!(Array<!Uint8Array>|Array<string>)} value
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.setProceduresList = function(value) {
	  return jspb.Message.setField(this, 9, value || []);
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @param {number=} opt_index
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.addProcedures = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.role.RoleSchema} returns this
	 */
	proto.role.RoleSchema.prototype.clearProceduresList = function() {
	  return this.setProceduresList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleId.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleId.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleId}
	 */
	proto.role.RoleId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleId;
	  return proto.role.RoleId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleId}
	 */
	proto.role.RoleId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.role.RoleId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleId} returns this
	 */
	proto.role.RoleId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleName.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleName.toObject = function(includeInstance, msg) {
	  var obj = {
	    apiId: msg.getApiId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 2, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleName}
	 */
	proto.role.RoleName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleName;
	  return proto.role.RoleName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleName}
	 */
	proto.role.RoleName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes api_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleName.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes api_id = 1;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.role.RoleName.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleName.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleName} returns this
	 */
	proto.role.RoleName.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.role.RoleName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.role.RoleName} returns this
	 */
	proto.role.RoleName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.ApiId.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.ApiId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.ApiId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.ApiId.toObject = function(includeInstance, msg) {
	  var obj = {
	    apiId: msg.getApiId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.ApiId}
	 */
	proto.role.ApiId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.ApiId;
	  return proto.role.ApiId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.ApiId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.ApiId}
	 */
	proto.role.ApiId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.ApiId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.ApiId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.ApiId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.ApiId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes api_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.ApiId.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes api_id = 1;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.role.ApiId.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.role.ApiId.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.ApiId} returns this
	 */
	proto.role.ApiId.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.UserId.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.UserId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.UserId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.UserId.toObject = function(includeInstance, msg) {
	  var obj = {
	    userId: msg.getUserId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.UserId}
	 */
	proto.role.UserId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.UserId;
	  return proto.role.UserId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.UserId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.UserId}
	 */
	proto.role.UserId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setUserId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.UserId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.UserId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.UserId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.UserId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getUserId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes user_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.UserId.prototype.getUserId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes user_id = 1;
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {string}
	 */
	proto.role.UserId.prototype.getUserId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getUserId()));
	};


	/**
	 * optional bytes user_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {!Uint8Array}
	 */
	proto.role.UserId.prototype.getUserId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getUserId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.UserId} returns this
	 */
	proto.role.UserId.prototype.setUserId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleUpdate.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    multi: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
	    ipLock: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
	    accessDuration: jspb.Message.getFieldWithDefault(msg, 5, 0),
	    refreshDuration: jspb.Message.getFieldWithDefault(msg, 6, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleUpdate}
	 */
	proto.role.RoleUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleUpdate;
	  return proto.role.RoleUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleUpdate}
	 */
	proto.role.RoleUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setMulti(value);
	      break;
	    case 4:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setIpLock(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setAccessDuration(value);
	      break;
	    case 6:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setRefreshDuration(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeBool(
	      3,
	      f
	    );
	  }
	  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeBool(
	      4,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeInt32(
	      5,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 6));
	  if (f != null) {
	    writer.writeInt32(
	      6,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.role.RoleUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.role.RoleUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.role.RoleUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional bool multi = 3;
	 * @return {boolean}
	 */
	proto.role.RoleUpdate.prototype.getMulti = function() {
	  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
	};


	/**
	 * @param {boolean} value
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.setMulti = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.clearMulti = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.role.RoleUpdate.prototype.hasMulti = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional bool ip_lock = 4;
	 * @return {boolean}
	 */
	proto.role.RoleUpdate.prototype.getIpLock = function() {
	  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
	};


	/**
	 * @param {boolean} value
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.setIpLock = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.clearIpLock = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.role.RoleUpdate.prototype.hasIpLock = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional int32 access_duration = 5;
	 * @return {number}
	 */
	proto.role.RoleUpdate.prototype.getAccessDuration = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.setAccessDuration = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.clearAccessDuration = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.role.RoleUpdate.prototype.hasAccessDuration = function() {
	  return jspb.Message.getField(this, 5) != null;
	};


	/**
	 * optional int32 refresh_duration = 6;
	 * @return {number}
	 */
	proto.role.RoleUpdate.prototype.getRefreshDuration = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.setRefreshDuration = function(value) {
	  return jspb.Message.setField(this, 6, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.role.RoleUpdate} returns this
	 */
	proto.role.RoleUpdate.prototype.clearRefreshDuration = function() {
	  return jspb.Message.setField(this, 6, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.role.RoleUpdate.prototype.hasRefreshDuration = function() {
	  return jspb.Message.getField(this, 6) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleAccess.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleAccess.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleAccess} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleAccess.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64(),
	    procedureId: msg.getProcedureId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleAccess}
	 */
	proto.role.RoleAccess.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleAccess;
	  return proto.role.RoleAccess.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleAccess} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleAccess}
	 */
	proto.role.RoleAccess.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setProcedureId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleAccess.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleAccess.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleAccess} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleAccess.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getProcedureId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleAccess.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.role.RoleAccess.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleAccess.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleAccess} returns this
	 */
	proto.role.RoleAccess.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes procedure_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleAccess.prototype.getProcedureId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes procedure_id = 2;
	 * This is a type-conversion wrapper around `getProcedureId()`
	 * @return {string}
	 */
	proto.role.RoleAccess.prototype.getProcedureId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getProcedureId()));
	};


	/**
	 * optional bytes procedure_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getProcedureId()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleAccess.prototype.getProcedureId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getProcedureId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleAccess} returns this
	 */
	proto.role.RoleAccess.prototype.setProcedureId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    result: (f = msg.getResult()) && proto.role.RoleSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleReadResponse}
	 */
	proto.role.RoleReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleReadResponse;
	  return proto.role.RoleReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleReadResponse}
	 */
	proto.role.RoleReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.role.RoleSchema;
	      reader.readMessage(value,proto.role.RoleSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.role.RoleSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional RoleSchema result = 1;
	 * @return {?proto.role.RoleSchema}
	 */
	proto.role.RoleReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.role.RoleSchema} */ (
	    jspb.Message.getWrapperField(this, proto.role.RoleSchema, 1));
	};


	/**
	 * @param {?proto.role.RoleSchema|undefined} value
	 * @return {!proto.role.RoleReadResponse} returns this
	*/
	proto.role.RoleReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.role.RoleReadResponse} returns this
	 */
	proto.role.RoleReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.role.RoleReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.role.RoleListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.role.RoleSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleListResponse}
	 */
	proto.role.RoleListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleListResponse;
	  return proto.role.RoleListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleListResponse}
	 */
	proto.role.RoleListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.role.RoleSchema;
	      reader.readMessage(value,proto.role.RoleSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.role.RoleSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated RoleSchema results = 1;
	 * @return {!Array<!proto.role.RoleSchema>}
	 */
	proto.role.RoleListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.role.RoleSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.role.RoleSchema, 1));
	};


	/**
	 * @param {!Array<!proto.role.RoleSchema>} value
	 * @return {!proto.role.RoleListResponse} returns this
	*/
	proto.role.RoleListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.role.RoleSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.role.RoleSchema}
	 */
	proto.role.RoleListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.role.RoleSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.role.RoleListResponse} returns this
	 */
	proto.role.RoleListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleCreateResponse}
	 */
	proto.role.RoleCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleCreateResponse;
	  return proto.role.RoleCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleCreateResponse}
	 */
	proto.role.RoleCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.role.RoleCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.role.RoleCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.role.RoleCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.role.RoleCreateResponse} returns this
	 */
	proto.role.RoleCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.role.RoleChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.role.RoleChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.role.RoleChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.role.RoleChangeResponse}
	 */
	proto.role.RoleChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.role.RoleChangeResponse;
	  return proto.role.RoleChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.role.RoleChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.role.RoleChangeResponse}
	 */
	proto.role.RoleChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.role.RoleChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.role.RoleChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.role.RoleChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.role.RoleChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.role); 
} (role_pb));

/**
 * @fileoverview gRPC-Web generated client stub for role
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: rmcs_auth_api/role.proto


/* eslint-disable */
// @ts-nocheck



const grpc$3 = {};
grpc$3.web = require$$0$1;

const proto$4 = {};
proto$4.role = role_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$4.role.RoleServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$3.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$4.role.RoleServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$3.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.RoleId,
 *   !proto.role.RoleReadResponse>}
 */
const methodDescriptor_RoleService_ReadRole = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/ReadRole',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.RoleId,
  proto$4.role.RoleReadResponse,
  /**
   * @param {!proto.role.RoleId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleReadResponse.deserializeBinary
);


/**
 * @param {!proto.role.RoleId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.readRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/ReadRole',
      request,
      metadata || {},
      methodDescriptor_RoleService_ReadRole,
      callback);
};


/**
 * @param {!proto.role.RoleId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleReadResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.readRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/ReadRole',
      request,
      metadata || {},
      methodDescriptor_RoleService_ReadRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.RoleName,
 *   !proto.role.RoleReadResponse>}
 */
const methodDescriptor_RoleService_ReadRoleByName = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/ReadRoleByName',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.RoleName,
  proto$4.role.RoleReadResponse,
  /**
   * @param {!proto.role.RoleName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleReadResponse.deserializeBinary
);


/**
 * @param {!proto.role.RoleName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.readRoleByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/ReadRoleByName',
      request,
      metadata || {},
      methodDescriptor_RoleService_ReadRoleByName,
      callback);
};


/**
 * @param {!proto.role.RoleName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleReadResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.readRoleByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/ReadRoleByName',
      request,
      metadata || {},
      methodDescriptor_RoleService_ReadRoleByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.ApiId,
 *   !proto.role.RoleListResponse>}
 */
const methodDescriptor_RoleService_ListRoleByApi = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/ListRoleByApi',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.ApiId,
  proto$4.role.RoleListResponse,
  /**
   * @param {!proto.role.ApiId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleListResponse.deserializeBinary
);


/**
 * @param {!proto.role.ApiId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.listRoleByApi =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/ListRoleByApi',
      request,
      metadata || {},
      methodDescriptor_RoleService_ListRoleByApi,
      callback);
};


/**
 * @param {!proto.role.ApiId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleListResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.listRoleByApi =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/ListRoleByApi',
      request,
      metadata || {},
      methodDescriptor_RoleService_ListRoleByApi);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.UserId,
 *   !proto.role.RoleListResponse>}
 */
const methodDescriptor_RoleService_ListRoleByUser = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/ListRoleByUser',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.UserId,
  proto$4.role.RoleListResponse,
  /**
   * @param {!proto.role.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleListResponse.deserializeBinary
);


/**
 * @param {!proto.role.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.listRoleByUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/ListRoleByUser',
      request,
      metadata || {},
      methodDescriptor_RoleService_ListRoleByUser,
      callback);
};


/**
 * @param {!proto.role.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleListResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.listRoleByUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/ListRoleByUser',
      request,
      metadata || {},
      methodDescriptor_RoleService_ListRoleByUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.RoleSchema,
 *   !proto.role.RoleCreateResponse>}
 */
const methodDescriptor_RoleService_CreateRole = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/CreateRole',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.RoleSchema,
  proto$4.role.RoleCreateResponse,
  /**
   * @param {!proto.role.RoleSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleCreateResponse.deserializeBinary
);


/**
 * @param {!proto.role.RoleSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.createRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/CreateRole',
      request,
      metadata || {},
      methodDescriptor_RoleService_CreateRole,
      callback);
};


/**
 * @param {!proto.role.RoleSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleCreateResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.createRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/CreateRole',
      request,
      metadata || {},
      methodDescriptor_RoleService_CreateRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.RoleUpdate,
 *   !proto.role.RoleChangeResponse>}
 */
const methodDescriptor_RoleService_UpdateRole = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/UpdateRole',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.RoleUpdate,
  proto$4.role.RoleChangeResponse,
  /**
   * @param {!proto.role.RoleUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleChangeResponse.deserializeBinary
);


/**
 * @param {!proto.role.RoleUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.updateRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/UpdateRole',
      request,
      metadata || {},
      methodDescriptor_RoleService_UpdateRole,
      callback);
};


/**
 * @param {!proto.role.RoleUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleChangeResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.updateRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/UpdateRole',
      request,
      metadata || {},
      methodDescriptor_RoleService_UpdateRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.RoleId,
 *   !proto.role.RoleChangeResponse>}
 */
const methodDescriptor_RoleService_DeleteRole = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/DeleteRole',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.RoleId,
  proto$4.role.RoleChangeResponse,
  /**
   * @param {!proto.role.RoleId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleChangeResponse.deserializeBinary
);


/**
 * @param {!proto.role.RoleId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.deleteRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/DeleteRole',
      request,
      metadata || {},
      methodDescriptor_RoleService_DeleteRole,
      callback);
};


/**
 * @param {!proto.role.RoleId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleChangeResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.deleteRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/DeleteRole',
      request,
      metadata || {},
      methodDescriptor_RoleService_DeleteRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.RoleAccess,
 *   !proto.role.RoleChangeResponse>}
 */
const methodDescriptor_RoleService_AddRoleAccess = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/AddRoleAccess',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.RoleAccess,
  proto$4.role.RoleChangeResponse,
  /**
   * @param {!proto.role.RoleAccess} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleChangeResponse.deserializeBinary
);


/**
 * @param {!proto.role.RoleAccess} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.addRoleAccess =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/AddRoleAccess',
      request,
      metadata || {},
      methodDescriptor_RoleService_AddRoleAccess,
      callback);
};


/**
 * @param {!proto.role.RoleAccess} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleChangeResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.addRoleAccess =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/AddRoleAccess',
      request,
      metadata || {},
      methodDescriptor_RoleService_AddRoleAccess);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.role.RoleAccess,
 *   !proto.role.RoleChangeResponse>}
 */
const methodDescriptor_RoleService_RemoveRoleAccess = new grpc$3.web.MethodDescriptor(
  '/role.RoleService/RemoveRoleAccess',
  grpc$3.web.MethodType.UNARY,
  proto$4.role.RoleAccess,
  proto$4.role.RoleChangeResponse,
  /**
   * @param {!proto.role.RoleAccess} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$4.role.RoleChangeResponse.deserializeBinary
);


/**
 * @param {!proto.role.RoleAccess} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.role.RoleChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.role.RoleChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$4.role.RoleServiceClient.prototype.removeRoleAccess =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/role.RoleService/RemoveRoleAccess',
      request,
      metadata || {},
      methodDescriptor_RoleService_RemoveRoleAccess,
      callback);
};


/**
 * @param {!proto.role.RoleAccess} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.role.RoleChangeResponse>}
 *     Promise that resolves to the response
 */
proto$4.role.RoleServicePromiseClient.prototype.removeRoleAccess =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/role.RoleService/RemoveRoleAccess',
      request,
      metadata || {},
      methodDescriptor_RoleService_RemoveRoleAccess);
};


var role_grpc_web_pb = proto$4.role;

var role_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(role_grpc_web_pb);

var user_pb = {};

(function (exports) {
	// source: rmcs_auth_api/user.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.user.RoleId', null, global);
	goog.exportSymbol('proto.user.UserChangeResponse', null, global);
	goog.exportSymbol('proto.user.UserCreateResponse', null, global);
	goog.exportSymbol('proto.user.UserId', null, global);
	goog.exportSymbol('proto.user.UserListResponse', null, global);
	goog.exportSymbol('proto.user.UserName', null, global);
	goog.exportSymbol('proto.user.UserReadResponse', null, global);
	goog.exportSymbol('proto.user.UserRole', null, global);
	goog.exportSymbol('proto.user.UserRoleSchema', null, global);
	goog.exportSymbol('proto.user.UserSchema', null, global);
	goog.exportSymbol('proto.user.UserUpdate', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserRoleSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.UserRoleSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserRoleSchema.displayName = 'proto.user.UserRoleSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.UserSchema.repeatedFields_, null);
	};
	goog.inherits(proto.user.UserSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserSchema.displayName = 'proto.user.UserSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.UserId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserId.displayName = 'proto.user.UserId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserName = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.UserName, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserName.displayName = 'proto.user.UserName';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.RoleId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.RoleId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.RoleId.displayName = 'proto.user.RoleId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.UserUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserUpdate.displayName = 'proto.user.UserUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserRole = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.UserRole, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserRole.displayName = 'proto.user.UserRole';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.UserReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserReadResponse.displayName = 'proto.user.UserReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.user.UserListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.user.UserListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserListResponse.displayName = 'proto.user.UserListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.UserCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserCreateResponse.displayName = 'proto.user.UserCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.user.UserChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.user.UserChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.user.UserChangeResponse.displayName = 'proto.user.UserChangeResponse';
	}



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserRoleSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserRoleSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserRoleSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserRoleSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	    apiId: msg.getApiId_asB64(),
	    role: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    multi: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
	    ipLock: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
	    accessDuration: jspb.Message.getFieldWithDefault(msg, 5, 0),
	    refreshDuration: jspb.Message.getFieldWithDefault(msg, 6, 0),
	    accessKey: msg.getAccessKey_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserRoleSchema}
	 */
	proto.user.UserRoleSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserRoleSchema;
	  return proto.user.UserRoleSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserRoleSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserRoleSchema}
	 */
	proto.user.UserRoleSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setRole(value);
	      break;
	    case 3:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setMulti(value);
	      break;
	    case 4:
	      var value = /** @type {boolean} */ (reader.readBool());
	      msg.setIpLock(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setAccessDuration(value);
	      break;
	    case 6:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setRefreshDuration(value);
	      break;
	    case 7:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAccessKey(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserRoleSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserRoleSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserRoleSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserRoleSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getRole();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getMulti();
	  if (f) {
	    writer.writeBool(
	      3,
	      f
	    );
	  }
	  f = message.getIpLock();
	  if (f) {
	    writer.writeBool(
	      4,
	      f
	    );
	  }
	  f = message.getAccessDuration();
	  if (f !== 0) {
	    writer.writeInt32(
	      5,
	      f
	    );
	  }
	  f = message.getRefreshDuration();
	  if (f !== 0) {
	    writer.writeInt32(
	      6,
	      f
	    );
	  }
	  f = message.getAccessKey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      7,
	      f
	    );
	  }
	};


	/**
	 * optional bytes api_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.UserRoleSchema.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes api_id = 1;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.user.UserRoleSchema.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.user.UserRoleSchema.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.UserRoleSchema} returns this
	 */
	proto.user.UserRoleSchema.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string role = 2;
	 * @return {string}
	 */
	proto.user.UserRoleSchema.prototype.getRole = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserRoleSchema} returns this
	 */
	proto.user.UserRoleSchema.prototype.setRole = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional bool multi = 3;
	 * @return {boolean}
	 */
	proto.user.UserRoleSchema.prototype.getMulti = function() {
	  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
	};


	/**
	 * @param {boolean} value
	 * @return {!proto.user.UserRoleSchema} returns this
	 */
	proto.user.UserRoleSchema.prototype.setMulti = function(value) {
	  return jspb.Message.setProto3BooleanField(this, 3, value);
	};


	/**
	 * optional bool ip_lock = 4;
	 * @return {boolean}
	 */
	proto.user.UserRoleSchema.prototype.getIpLock = function() {
	  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
	};


	/**
	 * @param {boolean} value
	 * @return {!proto.user.UserRoleSchema} returns this
	 */
	proto.user.UserRoleSchema.prototype.setIpLock = function(value) {
	  return jspb.Message.setProto3BooleanField(this, 4, value);
	};


	/**
	 * optional int32 access_duration = 5;
	 * @return {number}
	 */
	proto.user.UserRoleSchema.prototype.getAccessDuration = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.user.UserRoleSchema} returns this
	 */
	proto.user.UserRoleSchema.prototype.setAccessDuration = function(value) {
	  return jspb.Message.setProto3IntField(this, 5, value);
	};


	/**
	 * optional int32 refresh_duration = 6;
	 * @return {number}
	 */
	proto.user.UserRoleSchema.prototype.getRefreshDuration = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.user.UserRoleSchema} returns this
	 */
	proto.user.UserRoleSchema.prototype.setRefreshDuration = function(value) {
	  return jspb.Message.setProto3IntField(this, 6, value);
	};


	/**
	 * optional bytes access_key = 7;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.UserRoleSchema.prototype.getAccessKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
	};


	/**
	 * optional bytes access_key = 7;
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {string}
	 */
	proto.user.UserRoleSchema.prototype.getAccessKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getAccessKey()));
	};


	/**
	 * optional bytes access_key = 7;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {!Uint8Array}
	 */
	proto.user.UserRoleSchema.prototype.getAccessKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getAccessKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.UserRoleSchema} returns this
	 */
	proto.user.UserRoleSchema.prototype.setAccessKey = function(value) {
	  return jspb.Message.setProto3BytesField(this, 7, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.user.UserSchema.repeatedFields_ = [6];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    phone: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    password: jspb.Message.getFieldWithDefault(msg, 5, ""),
	    rolesList: jspb.Message.toObjectList(msg.getRolesList(),
	    proto.user.UserRoleSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserSchema}
	 */
	proto.user.UserSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserSchema;
	  return proto.user.UserSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserSchema}
	 */
	proto.user.UserSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setEmail(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setPhone(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setPassword(value);
	      break;
	    case 6:
	      var value = new proto.user.UserRoleSchema;
	      reader.readMessage(value,proto.user.UserRoleSchema.deserializeBinaryFromReader);
	      msg.addRoles(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getEmail();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getPhone();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getPassword();
	  if (f.length > 0) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	  f = message.getRolesList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      6,
	      f,
	      proto.user.UserRoleSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.UserSchema.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.user.UserSchema.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.user.UserSchema.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.UserSchema} returns this
	 */
	proto.user.UserSchema.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.user.UserSchema.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserSchema} returns this
	 */
	proto.user.UserSchema.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string email = 3;
	 * @return {string}
	 */
	proto.user.UserSchema.prototype.getEmail = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserSchema} returns this
	 */
	proto.user.UserSchema.prototype.setEmail = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string phone = 4;
	 * @return {string}
	 */
	proto.user.UserSchema.prototype.getPhone = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserSchema} returns this
	 */
	proto.user.UserSchema.prototype.setPhone = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * optional string password = 5;
	 * @return {string}
	 */
	proto.user.UserSchema.prototype.getPassword = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserSchema} returns this
	 */
	proto.user.UserSchema.prototype.setPassword = function(value) {
	  return jspb.Message.setProto3StringField(this, 5, value);
	};


	/**
	 * repeated UserRoleSchema roles = 6;
	 * @return {!Array<!proto.user.UserRoleSchema>}
	 */
	proto.user.UserSchema.prototype.getRolesList = function() {
	  return /** @type{!Array<!proto.user.UserRoleSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.user.UserRoleSchema, 6));
	};


	/**
	 * @param {!Array<!proto.user.UserRoleSchema>} value
	 * @return {!proto.user.UserSchema} returns this
	*/
	proto.user.UserSchema.prototype.setRolesList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 6, value);
	};


	/**
	 * @param {!proto.user.UserRoleSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.user.UserRoleSchema}
	 */
	proto.user.UserSchema.prototype.addRoles = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.user.UserRoleSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.user.UserSchema} returns this
	 */
	proto.user.UserSchema.prototype.clearRolesList = function() {
	  return this.setRolesList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserId.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserId.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserId}
	 */
	proto.user.UserId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserId;
	  return proto.user.UserId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserId}
	 */
	proto.user.UserId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.UserId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.user.UserId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.user.UserId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.UserId} returns this
	 */
	proto.user.UserId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserName.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserName.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserName} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserName.toObject = function(includeInstance, msg) {
	  var obj = {
	    name: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserName}
	 */
	proto.user.UserName.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserName;
	  return proto.user.UserName.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserName} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserName}
	 */
	proto.user.UserName.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserName.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserName.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserName} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserName.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getName();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string name = 1;
	 * @return {string}
	 */
	proto.user.UserName.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserName} returns this
	 */
	proto.user.UserName.prototype.setName = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.RoleId.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.RoleId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.RoleId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.RoleId.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.RoleId}
	 */
	proto.user.RoleId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.RoleId;
	  return proto.user.RoleId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.RoleId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.RoleId}
	 */
	proto.user.RoleId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.RoleId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.RoleId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.RoleId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.RoleId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.RoleId.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.user.RoleId.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.user.RoleId.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.RoleId} returns this
	 */
	proto.user.RoleId.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserUpdate.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64(),
	    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    phone: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    password: jspb.Message.getFieldWithDefault(msg, 5, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserUpdate}
	 */
	proto.user.UserUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserUpdate;
	  return proto.user.UserUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserUpdate}
	 */
	proto.user.UserUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setName(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setEmail(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setPhone(value);
	      break;
	    case 5:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setPassword(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeString(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.UserUpdate.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.user.UserUpdate.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.user.UserUpdate.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string name = 2;
	 * @return {string}
	 */
	proto.user.UserUpdate.prototype.getName = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.setName = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.clearName = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.user.UserUpdate.prototype.hasName = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string email = 3;
	 * @return {string}
	 */
	proto.user.UserUpdate.prototype.getEmail = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.setEmail = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.clearEmail = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.user.UserUpdate.prototype.hasEmail = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional string phone = 4;
	 * @return {string}
	 */
	proto.user.UserUpdate.prototype.getPhone = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.setPhone = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.clearPhone = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.user.UserUpdate.prototype.hasPhone = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional string password = 5;
	 * @return {string}
	 */
	proto.user.UserUpdate.prototype.getPassword = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.setPassword = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.user.UserUpdate} returns this
	 */
	proto.user.UserUpdate.prototype.clearPassword = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.user.UserUpdate.prototype.hasPassword = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserRole.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserRole.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserRole} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserRole.toObject = function(includeInstance, msg) {
	  var obj = {
	    userId: msg.getUserId_asB64(),
	    roleId: msg.getRoleId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserRole}
	 */
	proto.user.UserRole.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserRole;
	  return proto.user.UserRole.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserRole} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserRole}
	 */
	proto.user.UserRole.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setUserId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setRoleId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserRole.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserRole.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserRole} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserRole.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getUserId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getRoleId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes user_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.UserRole.prototype.getUserId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes user_id = 1;
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {string}
	 */
	proto.user.UserRole.prototype.getUserId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getUserId()));
	};


	/**
	 * optional bytes user_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {!Uint8Array}
	 */
	proto.user.UserRole.prototype.getUserId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getUserId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.UserRole} returns this
	 */
	proto.user.UserRole.prototype.setUserId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes role_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.UserRole.prototype.getRoleId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes role_id = 2;
	 * This is a type-conversion wrapper around `getRoleId()`
	 * @return {string}
	 */
	proto.user.UserRole.prototype.getRoleId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getRoleId()));
	};


	/**
	 * optional bytes role_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getRoleId()`
	 * @return {!Uint8Array}
	 */
	proto.user.UserRole.prototype.getRoleId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getRoleId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.UserRole} returns this
	 */
	proto.user.UserRole.prototype.setRoleId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    result: (f = msg.getResult()) && proto.user.UserSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserReadResponse}
	 */
	proto.user.UserReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserReadResponse;
	  return proto.user.UserReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserReadResponse}
	 */
	proto.user.UserReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.user.UserSchema;
	      reader.readMessage(value,proto.user.UserSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.user.UserSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional UserSchema result = 1;
	 * @return {?proto.user.UserSchema}
	 */
	proto.user.UserReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.user.UserSchema} */ (
	    jspb.Message.getWrapperField(this, proto.user.UserSchema, 1));
	};


	/**
	 * @param {?proto.user.UserSchema|undefined} value
	 * @return {!proto.user.UserReadResponse} returns this
	*/
	proto.user.UserReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.user.UserReadResponse} returns this
	 */
	proto.user.UserReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.user.UserReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.user.UserListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.user.UserSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserListResponse}
	 */
	proto.user.UserListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserListResponse;
	  return proto.user.UserListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserListResponse}
	 */
	proto.user.UserListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.user.UserSchema;
	      reader.readMessage(value,proto.user.UserSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.user.UserSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated UserSchema results = 1;
	 * @return {!Array<!proto.user.UserSchema>}
	 */
	proto.user.UserListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.user.UserSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.user.UserSchema, 1));
	};


	/**
	 * @param {!Array<!proto.user.UserSchema>} value
	 * @return {!proto.user.UserListResponse} returns this
	*/
	proto.user.UserListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.user.UserSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.user.UserSchema}
	 */
	proto.user.UserListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.user.UserSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.user.UserListResponse} returns this
	 */
	proto.user.UserListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    id: msg.getId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserCreateResponse}
	 */
	proto.user.UserCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserCreateResponse;
	  return proto.user.UserCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserCreateResponse}
	 */
	proto.user.UserCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.user.UserCreateResponse.prototype.getId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes id = 1;
	 * This is a type-conversion wrapper around `getId()`
	 * @return {string}
	 */
	proto.user.UserCreateResponse.prototype.getId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getId()));
	};


	/**
	 * optional bytes id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getId()`
	 * @return {!Uint8Array}
	 */
	proto.user.UserCreateResponse.prototype.getId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.user.UserCreateResponse} returns this
	 */
	proto.user.UserCreateResponse.prototype.setId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.user.UserChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.user.UserChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.user.UserChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.user.UserChangeResponse}
	 */
	proto.user.UserChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.user.UserChangeResponse;
	  return proto.user.UserChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.user.UserChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.user.UserChangeResponse}
	 */
	proto.user.UserChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.user.UserChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.user.UserChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.user.UserChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.user.UserChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.user); 
} (user_pb));

/**
 * @fileoverview gRPC-Web generated client stub for user
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: rmcs_auth_api/user.proto


/* eslint-disable */
// @ts-nocheck



const grpc$2 = {};
grpc$2.web = require$$0$1;

const proto$3 = {};
proto$3.user = user_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$3.user.UserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$2.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$3.user.UserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$2.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserId,
 *   !proto.user.UserReadResponse>}
 */
const methodDescriptor_UserService_ReadUser = new grpc$2.web.MethodDescriptor(
  '/user.UserService/ReadUser',
  grpc$2.web.MethodType.UNARY,
  proto$3.user.UserId,
  proto$3.user.UserReadResponse,
  /**
   * @param {!proto.user.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.user.UserReadResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.user.UserServiceClient.prototype.readUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ReadUser',
      request,
      metadata || {},
      methodDescriptor_UserService_ReadUser,
      callback);
};


/**
 * @param {!proto.user.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserReadResponse>}
 *     Promise that resolves to the response
 */
proto$3.user.UserServicePromiseClient.prototype.readUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ReadUser',
      request,
      metadata || {},
      methodDescriptor_UserService_ReadUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserName,
 *   !proto.user.UserReadResponse>}
 */
const methodDescriptor_UserService_ReadUserByName = new grpc$2.web.MethodDescriptor(
  '/user.UserService/ReadUserByName',
  grpc$2.web.MethodType.UNARY,
  proto$3.user.UserName,
  proto$3.user.UserReadResponse,
  /**
   * @param {!proto.user.UserName} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.user.UserReadResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserName} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.user.UserServiceClient.prototype.readUserByName =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ReadUserByName',
      request,
      metadata || {},
      methodDescriptor_UserService_ReadUserByName,
      callback);
};


/**
 * @param {!proto.user.UserName} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserReadResponse>}
 *     Promise that resolves to the response
 */
proto$3.user.UserServicePromiseClient.prototype.readUserByName =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ReadUserByName',
      request,
      metadata || {},
      methodDescriptor_UserService_ReadUserByName);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.RoleId,
 *   !proto.user.UserListResponse>}
 */
const methodDescriptor_UserService_ListUserByRole = new grpc$2.web.MethodDescriptor(
  '/user.UserService/ListUserByRole',
  grpc$2.web.MethodType.UNARY,
  proto$3.user.RoleId,
  proto$3.user.UserListResponse,
  /**
   * @param {!proto.user.RoleId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.user.UserListResponse.deserializeBinary
);


/**
 * @param {!proto.user.RoleId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.user.UserServiceClient.prototype.listUserByRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/ListUserByRole',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByRole,
      callback);
};


/**
 * @param {!proto.user.RoleId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserListResponse>}
 *     Promise that resolves to the response
 */
proto$3.user.UserServicePromiseClient.prototype.listUserByRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/ListUserByRole',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUserByRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserSchema,
 *   !proto.user.UserCreateResponse>}
 */
const methodDescriptor_UserService_CreateUser = new grpc$2.web.MethodDescriptor(
  '/user.UserService/CreateUser',
  grpc$2.web.MethodType.UNARY,
  proto$3.user.UserSchema,
  proto$3.user.UserCreateResponse,
  /**
   * @param {!proto.user.UserSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.user.UserCreateResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.user.UserServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser,
      callback);
};


/**
 * @param {!proto.user.UserSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserCreateResponse>}
 *     Promise that resolves to the response
 */
proto$3.user.UserServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserUpdate,
 *   !proto.user.UserChangeResponse>}
 */
const methodDescriptor_UserService_UpdateUser = new grpc$2.web.MethodDescriptor(
  '/user.UserService/UpdateUser',
  grpc$2.web.MethodType.UNARY,
  proto$3.user.UserUpdate,
  proto$3.user.UserChangeResponse,
  /**
   * @param {!proto.user.UserUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.user.UserChangeResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.user.UserServiceClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser,
      callback);
};


/**
 * @param {!proto.user.UserUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserChangeResponse>}
 *     Promise that resolves to the response
 */
proto$3.user.UserServicePromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserId,
 *   !proto.user.UserChangeResponse>}
 */
const methodDescriptor_UserService_DeleteUser = new grpc$2.web.MethodDescriptor(
  '/user.UserService/DeleteUser',
  grpc$2.web.MethodType.UNARY,
  proto$3.user.UserId,
  proto$3.user.UserChangeResponse,
  /**
   * @param {!proto.user.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.user.UserChangeResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.user.UserServiceClient.prototype.deleteUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/DeleteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_DeleteUser,
      callback);
};


/**
 * @param {!proto.user.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserChangeResponse>}
 *     Promise that resolves to the response
 */
proto$3.user.UserServicePromiseClient.prototype.deleteUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/DeleteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_DeleteUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserRole,
 *   !proto.user.UserChangeResponse>}
 */
const methodDescriptor_UserService_AddUserRole = new grpc$2.web.MethodDescriptor(
  '/user.UserService/AddUserRole',
  grpc$2.web.MethodType.UNARY,
  proto$3.user.UserRole,
  proto$3.user.UserChangeResponse,
  /**
   * @param {!proto.user.UserRole} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.user.UserChangeResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserRole} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.user.UserServiceClient.prototype.addUserRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/AddUserRole',
      request,
      metadata || {},
      methodDescriptor_UserService_AddUserRole,
      callback);
};


/**
 * @param {!proto.user.UserRole} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserChangeResponse>}
 *     Promise that resolves to the response
 */
proto$3.user.UserServicePromiseClient.prototype.addUserRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/AddUserRole',
      request,
      metadata || {},
      methodDescriptor_UserService_AddUserRole);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.user.UserRole,
 *   !proto.user.UserChangeResponse>}
 */
const methodDescriptor_UserService_RemoveUserRole = new grpc$2.web.MethodDescriptor(
  '/user.UserService/RemoveUserRole',
  grpc$2.web.MethodType.UNARY,
  proto$3.user.UserRole,
  proto$3.user.UserChangeResponse,
  /**
   * @param {!proto.user.UserRole} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$3.user.UserChangeResponse.deserializeBinary
);


/**
 * @param {!proto.user.UserRole} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.user.UserChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.user.UserChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$3.user.UserServiceClient.prototype.removeUserRole =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/user.UserService/RemoveUserRole',
      request,
      metadata || {},
      methodDescriptor_UserService_RemoveUserRole,
      callback);
};


/**
 * @param {!proto.user.UserRole} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.user.UserChangeResponse>}
 *     Promise that resolves to the response
 */
proto$3.user.UserServicePromiseClient.prototype.removeUserRole =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/user.UserService/RemoveUserRole',
      request,
      metadata || {},
      methodDescriptor_UserService_RemoveUserRole);
};


var user_grpc_web_pb = proto$3.user;

var user_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(user_grpc_web_pb);

var token_pb = {};

(function (exports) {
	// source: rmcs_auth_api/token.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.token.AccessId', null, global);
	goog.exportSymbol('proto.token.AuthToken', null, global);
	goog.exportSymbol('proto.token.AuthTokenCreate', null, global);
	goog.exportSymbol('proto.token.AuthTokenCreateResponse', null, global);
	goog.exportSymbol('proto.token.TokenChangeResponse', null, global);
	goog.exportSymbol('proto.token.TokenCreateResponse', null, global);
	goog.exportSymbol('proto.token.TokenListResponse', null, global);
	goog.exportSymbol('proto.token.TokenReadResponse', null, global);
	goog.exportSymbol('proto.token.TokenSchema', null, global);
	goog.exportSymbol('proto.token.TokenUpdate', null, global);
	goog.exportSymbol('proto.token.TokenUpdateResponse', null, global);
	goog.exportSymbol('proto.token.UserId', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.TokenSchema = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.TokenSchema, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.TokenSchema.displayName = 'proto.token.TokenSchema';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.AuthToken = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.AuthToken, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.AuthToken.displayName = 'proto.token.AuthToken';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.AccessId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.AccessId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.AccessId.displayName = 'proto.token.AccessId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.UserId = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.UserId, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.UserId.displayName = 'proto.token.UserId';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.AuthTokenCreate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.AuthTokenCreate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.AuthTokenCreate.displayName = 'proto.token.AuthTokenCreate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.TokenUpdate = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.TokenUpdate, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.TokenUpdate.displayName = 'proto.token.TokenUpdate';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.TokenReadResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.TokenReadResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.TokenReadResponse.displayName = 'proto.token.TokenReadResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.TokenListResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.token.TokenListResponse.repeatedFields_, null);
	};
	goog.inherits(proto.token.TokenListResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.TokenListResponse.displayName = 'proto.token.TokenListResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.TokenCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.TokenCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.TokenCreateResponse.displayName = 'proto.token.TokenCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.AuthTokenCreateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.token.AuthTokenCreateResponse.repeatedFields_, null);
	};
	goog.inherits(proto.token.AuthTokenCreateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.AuthTokenCreateResponse.displayName = 'proto.token.AuthTokenCreateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.TokenUpdateResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.TokenUpdateResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.TokenUpdateResponse.displayName = 'proto.token.TokenUpdateResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.token.TokenChangeResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.token.TokenChangeResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.token.TokenChangeResponse.displayName = 'proto.token.TokenChangeResponse';
	}



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.TokenSchema.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.TokenSchema.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.TokenSchema} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenSchema.toObject = function(includeInstance, msg) {
	  var obj = {
	    accessId: jspb.Message.getFieldWithDefault(msg, 1, 0),
	    userId: msg.getUserId_asB64(),
	    refreshToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    authToken: jspb.Message.getFieldWithDefault(msg, 4, ""),
	    expire: jspb.Message.getFieldWithDefault(msg, 5, 0),
	    ip: msg.getIp_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.TokenSchema}
	 */
	proto.token.TokenSchema.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.TokenSchema;
	  return proto.token.TokenSchema.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.TokenSchema} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.TokenSchema}
	 */
	proto.token.TokenSchema.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setAccessId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setUserId(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setRefreshToken(value);
	      break;
	    case 4:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAuthToken(value);
	      break;
	    case 5:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setExpire(value);
	      break;
	    case 6:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setIp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.TokenSchema.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.TokenSchema.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.TokenSchema} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenSchema.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAccessId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = message.getUserId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getRefreshToken();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = message.getAuthToken();
	  if (f.length > 0) {
	    writer.writeString(
	      4,
	      f
	    );
	  }
	  f = message.getExpire();
	  if (f !== 0) {
	    writer.writeInt64(
	      5,
	      f
	    );
	  }
	  f = message.getIp_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      6,
	      f
	    );
	  }
	};


	/**
	 * optional int32 access_id = 1;
	 * @return {number}
	 */
	proto.token.TokenSchema.prototype.getAccessId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.token.TokenSchema} returns this
	 */
	proto.token.TokenSchema.prototype.setAccessId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional bytes user_id = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.token.TokenSchema.prototype.getUserId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes user_id = 2;
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {string}
	 */
	proto.token.TokenSchema.prototype.getUserId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getUserId()));
	};


	/**
	 * optional bytes user_id = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {!Uint8Array}
	 */
	proto.token.TokenSchema.prototype.getUserId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getUserId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.token.TokenSchema} returns this
	 */
	proto.token.TokenSchema.prototype.setUserId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional string refresh_token = 3;
	 * @return {string}
	 */
	proto.token.TokenSchema.prototype.getRefreshToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.TokenSchema} returns this
	 */
	proto.token.TokenSchema.prototype.setRefreshToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};


	/**
	 * optional string auth_token = 4;
	 * @return {string}
	 */
	proto.token.TokenSchema.prototype.getAuthToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.TokenSchema} returns this
	 */
	proto.token.TokenSchema.prototype.setAuthToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 4, value);
	};


	/**
	 * optional int64 expire = 5;
	 * @return {number}
	 */
	proto.token.TokenSchema.prototype.getExpire = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.token.TokenSchema} returns this
	 */
	proto.token.TokenSchema.prototype.setExpire = function(value) {
	  return jspb.Message.setProto3IntField(this, 5, value);
	};


	/**
	 * optional bytes ip = 6;
	 * @return {!(string|Uint8Array)}
	 */
	proto.token.TokenSchema.prototype.getIp = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
	};


	/**
	 * optional bytes ip = 6;
	 * This is a type-conversion wrapper around `getIp()`
	 * @return {string}
	 */
	proto.token.TokenSchema.prototype.getIp_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getIp()));
	};


	/**
	 * optional bytes ip = 6;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIp()`
	 * @return {!Uint8Array}
	 */
	proto.token.TokenSchema.prototype.getIp_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getIp()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.token.TokenSchema} returns this
	 */
	proto.token.TokenSchema.prototype.setIp = function(value) {
	  return jspb.Message.setProto3BytesField(this, 6, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.AuthToken.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.AuthToken.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.AuthToken} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.AuthToken.toObject = function(includeInstance, msg) {
	  var obj = {
	    authToken: jspb.Message.getFieldWithDefault(msg, 1, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.AuthToken}
	 */
	proto.token.AuthToken.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.AuthToken;
	  return proto.token.AuthToken.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.AuthToken} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.AuthToken}
	 */
	proto.token.AuthToken.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAuthToken(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.AuthToken.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.AuthToken.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.AuthToken} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.AuthToken.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAuthToken();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional string auth_token = 1;
	 * @return {string}
	 */
	proto.token.AuthToken.prototype.getAuthToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.AuthToken} returns this
	 */
	proto.token.AuthToken.prototype.setAuthToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.AccessId.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.AccessId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.AccessId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.AccessId.toObject = function(includeInstance, msg) {
	  var obj = {
	    accessId: jspb.Message.getFieldWithDefault(msg, 1, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.AccessId}
	 */
	proto.token.AccessId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.AccessId;
	  return proto.token.AccessId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.AccessId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.AccessId}
	 */
	proto.token.AccessId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setAccessId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.AccessId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.AccessId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.AccessId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.AccessId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAccessId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional int32 access_id = 1;
	 * @return {number}
	 */
	proto.token.AccessId.prototype.getAccessId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.token.AccessId} returns this
	 */
	proto.token.AccessId.prototype.setAccessId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.UserId.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.UserId.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.UserId} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.UserId.toObject = function(includeInstance, msg) {
	  var obj = {
	    userId: msg.getUserId_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.UserId}
	 */
	proto.token.UserId.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.UserId;
	  return proto.token.UserId.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.UserId} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.UserId}
	 */
	proto.token.UserId.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setUserId(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.UserId.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.UserId.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.UserId} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.UserId.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getUserId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes user_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.token.UserId.prototype.getUserId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes user_id = 1;
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {string}
	 */
	proto.token.UserId.prototype.getUserId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getUserId()));
	};


	/**
	 * optional bytes user_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {!Uint8Array}
	 */
	proto.token.UserId.prototype.getUserId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getUserId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.token.UserId} returns this
	 */
	proto.token.UserId.prototype.setUserId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.AuthTokenCreate.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.AuthTokenCreate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.AuthTokenCreate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.AuthTokenCreate.toObject = function(includeInstance, msg) {
	  var obj = {
	    userId: msg.getUserId_asB64(),
	    expire: jspb.Message.getFieldWithDefault(msg, 2, 0),
	    ip: msg.getIp_asB64(),
	    number: jspb.Message.getFieldWithDefault(msg, 4, 0)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.AuthTokenCreate}
	 */
	proto.token.AuthTokenCreate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.AuthTokenCreate;
	  return proto.token.AuthTokenCreate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.AuthTokenCreate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.AuthTokenCreate}
	 */
	proto.token.AuthTokenCreate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setUserId(value);
	      break;
	    case 2:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setExpire(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setIp(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readUint32());
	      msg.setNumber(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.AuthTokenCreate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.AuthTokenCreate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.AuthTokenCreate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.AuthTokenCreate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getUserId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getExpire();
	  if (f !== 0) {
	    writer.writeInt64(
	      2,
	      f
	    );
	  }
	  f = message.getIp_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	  f = message.getNumber();
	  if (f !== 0) {
	    writer.writeUint32(
	      4,
	      f
	    );
	  }
	};


	/**
	 * optional bytes user_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.token.AuthTokenCreate.prototype.getUserId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes user_id = 1;
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {string}
	 */
	proto.token.AuthTokenCreate.prototype.getUserId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getUserId()));
	};


	/**
	 * optional bytes user_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {!Uint8Array}
	 */
	proto.token.AuthTokenCreate.prototype.getUserId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getUserId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.token.AuthTokenCreate} returns this
	 */
	proto.token.AuthTokenCreate.prototype.setUserId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional int64 expire = 2;
	 * @return {number}
	 */
	proto.token.AuthTokenCreate.prototype.getExpire = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.token.AuthTokenCreate} returns this
	 */
	proto.token.AuthTokenCreate.prototype.setExpire = function(value) {
	  return jspb.Message.setProto3IntField(this, 2, value);
	};


	/**
	 * optional bytes ip = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.token.AuthTokenCreate.prototype.getIp = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes ip = 3;
	 * This is a type-conversion wrapper around `getIp()`
	 * @return {string}
	 */
	proto.token.AuthTokenCreate.prototype.getIp_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getIp()));
	};


	/**
	 * optional bytes ip = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIp()`
	 * @return {!Uint8Array}
	 */
	proto.token.AuthTokenCreate.prototype.getIp_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getIp()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.token.AuthTokenCreate} returns this
	 */
	proto.token.AuthTokenCreate.prototype.setIp = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};


	/**
	 * optional uint32 number = 4;
	 * @return {number}
	 */
	proto.token.AuthTokenCreate.prototype.getNumber = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.token.AuthTokenCreate} returns this
	 */
	proto.token.AuthTokenCreate.prototype.setNumber = function(value) {
	  return jspb.Message.setProto3IntField(this, 4, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.TokenUpdate.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.TokenUpdate.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.TokenUpdate} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenUpdate.toObject = function(includeInstance, msg) {
	  var obj = {
	    accessId: jspb.Message.getFieldWithDefault(msg, 1, 0),
	    refreshToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    authToken: jspb.Message.getFieldWithDefault(msg, 3, ""),
	    expire: jspb.Message.getFieldWithDefault(msg, 4, 0),
	    ip: msg.getIp_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.TokenUpdate}
	 */
	proto.token.TokenUpdate.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.TokenUpdate;
	  return proto.token.TokenUpdate.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.TokenUpdate} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.TokenUpdate}
	 */
	proto.token.TokenUpdate.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setAccessId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setRefreshToken(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAuthToken(value);
	      break;
	    case 4:
	      var value = /** @type {number} */ (reader.readInt64());
	      msg.setExpire(value);
	      break;
	    case 5:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setIp(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.TokenUpdate.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.TokenUpdate.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.TokenUpdate} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenUpdate.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = /** @type {number} */ (jspb.Message.getField(message, 1));
	  if (f != null) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 2));
	  if (f != null) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = /** @type {string} */ (jspb.Message.getField(message, 3));
	  if (f != null) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	  f = /** @type {number} */ (jspb.Message.getField(message, 4));
	  if (f != null) {
	    writer.writeInt64(
	      4,
	      f
	    );
	  }
	  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
	  if (f != null) {
	    writer.writeBytes(
	      5,
	      f
	    );
	  }
	};


	/**
	 * optional int32 access_id = 1;
	 * @return {number}
	 */
	proto.token.TokenUpdate.prototype.getAccessId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.setAccessId = function(value) {
	  return jspb.Message.setField(this, 1, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.clearAccessId = function() {
	  return jspb.Message.setField(this, 1, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.token.TokenUpdate.prototype.hasAccessId = function() {
	  return jspb.Message.getField(this, 1) != null;
	};


	/**
	 * optional string refresh_token = 2;
	 * @return {string}
	 */
	proto.token.TokenUpdate.prototype.getRefreshToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.setRefreshToken = function(value) {
	  return jspb.Message.setField(this, 2, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.clearRefreshToken = function() {
	  return jspb.Message.setField(this, 2, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.token.TokenUpdate.prototype.hasRefreshToken = function() {
	  return jspb.Message.getField(this, 2) != null;
	};


	/**
	 * optional string auth_token = 3;
	 * @return {string}
	 */
	proto.token.TokenUpdate.prototype.getAuthToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.setAuthToken = function(value) {
	  return jspb.Message.setField(this, 3, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.clearAuthToken = function() {
	  return jspb.Message.setField(this, 3, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.token.TokenUpdate.prototype.hasAuthToken = function() {
	  return jspb.Message.getField(this, 3) != null;
	};


	/**
	 * optional int64 expire = 4;
	 * @return {number}
	 */
	proto.token.TokenUpdate.prototype.getExpire = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.setExpire = function(value) {
	  return jspb.Message.setField(this, 4, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.clearExpire = function() {
	  return jspb.Message.setField(this, 4, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.token.TokenUpdate.prototype.hasExpire = function() {
	  return jspb.Message.getField(this, 4) != null;
	};


	/**
	 * optional bytes ip = 5;
	 * @return {!(string|Uint8Array)}
	 */
	proto.token.TokenUpdate.prototype.getIp = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
	};


	/**
	 * optional bytes ip = 5;
	 * This is a type-conversion wrapper around `getIp()`
	 * @return {string}
	 */
	proto.token.TokenUpdate.prototype.getIp_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getIp()));
	};


	/**
	 * optional bytes ip = 5;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getIp()`
	 * @return {!Uint8Array}
	 */
	proto.token.TokenUpdate.prototype.getIp_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getIp()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.setIp = function(value) {
	  return jspb.Message.setField(this, 5, value);
	};


	/**
	 * Clears the field making it undefined.
	 * @return {!proto.token.TokenUpdate} returns this
	 */
	proto.token.TokenUpdate.prototype.clearIp = function() {
	  return jspb.Message.setField(this, 5, undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.token.TokenUpdate.prototype.hasIp = function() {
	  return jspb.Message.getField(this, 5) != null;
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.TokenReadResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.TokenReadResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.TokenReadResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenReadResponse.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    result: (f = msg.getResult()) && proto.token.TokenSchema.toObject(includeInstance, f)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.TokenReadResponse}
	 */
	proto.token.TokenReadResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.TokenReadResponse;
	  return proto.token.TokenReadResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.TokenReadResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.TokenReadResponse}
	 */
	proto.token.TokenReadResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.token.TokenSchema;
	      reader.readMessage(value,proto.token.TokenSchema.deserializeBinaryFromReader);
	      msg.setResult(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.TokenReadResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.TokenReadResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.TokenReadResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenReadResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResult();
	  if (f != null) {
	    writer.writeMessage(
	      1,
	      f,
	      proto.token.TokenSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional TokenSchema result = 1;
	 * @return {?proto.token.TokenSchema}
	 */
	proto.token.TokenReadResponse.prototype.getResult = function() {
	  return /** @type{?proto.token.TokenSchema} */ (
	    jspb.Message.getWrapperField(this, proto.token.TokenSchema, 1));
	};


	/**
	 * @param {?proto.token.TokenSchema|undefined} value
	 * @return {!proto.token.TokenReadResponse} returns this
	*/
	proto.token.TokenReadResponse.prototype.setResult = function(value) {
	  return jspb.Message.setWrapperField(this, 1, value);
	};


	/**
	 * Clears the message field making it undefined.
	 * @return {!proto.token.TokenReadResponse} returns this
	 */
	proto.token.TokenReadResponse.prototype.clearResult = function() {
	  return this.setResult(undefined);
	};


	/**
	 * Returns whether this field is set.
	 * @return {boolean}
	 */
	proto.token.TokenReadResponse.prototype.hasResult = function() {
	  return jspb.Message.getField(this, 1) != null;
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.token.TokenListResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.TokenListResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.TokenListResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.TokenListResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenListResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
	    proto.token.TokenSchema.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.TokenListResponse}
	 */
	proto.token.TokenListResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.TokenListResponse;
	  return proto.token.TokenListResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.TokenListResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.TokenListResponse}
	 */
	proto.token.TokenListResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.token.TokenSchema;
	      reader.readMessage(value,proto.token.TokenSchema.deserializeBinaryFromReader);
	      msg.addResults(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.TokenListResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.TokenListResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.TokenListResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenListResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getResultsList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.token.TokenSchema.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated TokenSchema results = 1;
	 * @return {!Array<!proto.token.TokenSchema>}
	 */
	proto.token.TokenListResponse.prototype.getResultsList = function() {
	  return /** @type{!Array<!proto.token.TokenSchema>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.token.TokenSchema, 1));
	};


	/**
	 * @param {!Array<!proto.token.TokenSchema>} value
	 * @return {!proto.token.TokenListResponse} returns this
	*/
	proto.token.TokenListResponse.prototype.setResultsList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.token.TokenSchema=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.token.TokenSchema}
	 */
	proto.token.TokenListResponse.prototype.addResults = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.token.TokenSchema, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.token.TokenListResponse} returns this
	 */
	proto.token.TokenListResponse.prototype.clearResultsList = function() {
	  return this.setResultsList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.TokenCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.TokenCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.TokenCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    accessId: jspb.Message.getFieldWithDefault(msg, 1, 0),
	    refreshToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    authToken: jspb.Message.getFieldWithDefault(msg, 3, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.TokenCreateResponse}
	 */
	proto.token.TokenCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.TokenCreateResponse;
	  return proto.token.TokenCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.TokenCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.TokenCreateResponse}
	 */
	proto.token.TokenCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {number} */ (reader.readInt32());
	      msg.setAccessId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setRefreshToken(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAuthToken(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.TokenCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.TokenCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.TokenCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAccessId();
	  if (f !== 0) {
	    writer.writeInt32(
	      1,
	      f
	    );
	  }
	  f = message.getRefreshToken();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getAuthToken();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional int32 access_id = 1;
	 * @return {number}
	 */
	proto.token.TokenCreateResponse.prototype.getAccessId = function() {
	  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
	};


	/**
	 * @param {number} value
	 * @return {!proto.token.TokenCreateResponse} returns this
	 */
	proto.token.TokenCreateResponse.prototype.setAccessId = function(value) {
	  return jspb.Message.setProto3IntField(this, 1, value);
	};


	/**
	 * optional string refresh_token = 2;
	 * @return {string}
	 */
	proto.token.TokenCreateResponse.prototype.getRefreshToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.TokenCreateResponse} returns this
	 */
	proto.token.TokenCreateResponse.prototype.setRefreshToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string auth_token = 3;
	 * @return {string}
	 */
	proto.token.TokenCreateResponse.prototype.getAuthToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.TokenCreateResponse} returns this
	 */
	proto.token.TokenCreateResponse.prototype.setAuthToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.token.AuthTokenCreateResponse.repeatedFields_ = [1];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.AuthTokenCreateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.AuthTokenCreateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.AuthTokenCreateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.AuthTokenCreateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
	    proto.token.TokenCreateResponse.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.AuthTokenCreateResponse}
	 */
	proto.token.AuthTokenCreateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.AuthTokenCreateResponse;
	  return proto.token.AuthTokenCreateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.AuthTokenCreateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.AuthTokenCreateResponse}
	 */
	proto.token.AuthTokenCreateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = new proto.token.TokenCreateResponse;
	      reader.readMessage(value,proto.token.TokenCreateResponse.deserializeBinaryFromReader);
	      msg.addTokens(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.AuthTokenCreateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.AuthTokenCreateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.AuthTokenCreateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.AuthTokenCreateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getTokensList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      1,
	      f,
	      proto.token.TokenCreateResponse.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * repeated TokenCreateResponse tokens = 1;
	 * @return {!Array<!proto.token.TokenCreateResponse>}
	 */
	proto.token.AuthTokenCreateResponse.prototype.getTokensList = function() {
	  return /** @type{!Array<!proto.token.TokenCreateResponse>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.token.TokenCreateResponse, 1));
	};


	/**
	 * @param {!Array<!proto.token.TokenCreateResponse>} value
	 * @return {!proto.token.AuthTokenCreateResponse} returns this
	*/
	proto.token.AuthTokenCreateResponse.prototype.setTokensList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 1, value);
	};


	/**
	 * @param {!proto.token.TokenCreateResponse=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.token.TokenCreateResponse}
	 */
	proto.token.AuthTokenCreateResponse.prototype.addTokens = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.token.TokenCreateResponse, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.token.AuthTokenCreateResponse} returns this
	 */
	proto.token.AuthTokenCreateResponse.prototype.clearTokensList = function() {
	  return this.setTokensList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.TokenUpdateResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.TokenUpdateResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.TokenUpdateResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenUpdateResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    refreshToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
	    authToken: jspb.Message.getFieldWithDefault(msg, 2, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.TokenUpdateResponse}
	 */
	proto.token.TokenUpdateResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.TokenUpdateResponse;
	  return proto.token.TokenUpdateResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.TokenUpdateResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.TokenUpdateResponse}
	 */
	proto.token.TokenUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setRefreshToken(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAuthToken(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.TokenUpdateResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.TokenUpdateResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.TokenUpdateResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenUpdateResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getRefreshToken();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getAuthToken();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional string refresh_token = 1;
	 * @return {string}
	 */
	proto.token.TokenUpdateResponse.prototype.getRefreshToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.TokenUpdateResponse} returns this
	 */
	proto.token.TokenUpdateResponse.prototype.setRefreshToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional string auth_token = 2;
	 * @return {string}
	 */
	proto.token.TokenUpdateResponse.prototype.getAuthToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.token.TokenUpdateResponse} returns this
	 */
	proto.token.TokenUpdateResponse.prototype.setAuthToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.token.TokenChangeResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.token.TokenChangeResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.token.TokenChangeResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenChangeResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.token.TokenChangeResponse}
	 */
	proto.token.TokenChangeResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.token.TokenChangeResponse;
	  return proto.token.TokenChangeResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.token.TokenChangeResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.token.TokenChangeResponse}
	 */
	proto.token.TokenChangeResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.token.TokenChangeResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.token.TokenChangeResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.token.TokenChangeResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.token.TokenChangeResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.token); 
} (token_pb));

/**
 * @fileoverview gRPC-Web generated client stub for token
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: rmcs_auth_api/token.proto


/* eslint-disable */
// @ts-nocheck



const grpc$1 = {};
grpc$1.web = require$$0$1;

const proto$2 = {};
proto$2.token = token_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$2.token.TokenServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$1.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$2.token.TokenServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc$1.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.AccessId,
 *   !proto.token.TokenReadResponse>}
 */
const methodDescriptor_TokenService_ReadAccessToken = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/ReadAccessToken',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.AccessId,
  proto$2.token.TokenReadResponse,
  /**
   * @param {!proto.token.AccessId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenReadResponse.deserializeBinary
);


/**
 * @param {!proto.token.AccessId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.readAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/ReadAccessToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_ReadAccessToken,
      callback);
};


/**
 * @param {!proto.token.AccessId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenReadResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.readAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/ReadAccessToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_ReadAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.AuthToken,
 *   !proto.token.TokenListResponse>}
 */
const methodDescriptor_TokenService_ListAuthToken = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/ListAuthToken',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.AuthToken,
  proto$2.token.TokenListResponse,
  /**
   * @param {!proto.token.AuthToken} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenListResponse.deserializeBinary
);


/**
 * @param {!proto.token.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.listAuthToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/ListAuthToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_ListAuthToken,
      callback);
};


/**
 * @param {!proto.token.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenListResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.listAuthToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/ListAuthToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_ListAuthToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.UserId,
 *   !proto.token.TokenListResponse>}
 */
const methodDescriptor_TokenService_ListTokenByUser = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/ListTokenByUser',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.UserId,
  proto$2.token.TokenListResponse,
  /**
   * @param {!proto.token.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenListResponse.deserializeBinary
);


/**
 * @param {!proto.token.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenListResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenListResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.listTokenByUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/ListTokenByUser',
      request,
      metadata || {},
      methodDescriptor_TokenService_ListTokenByUser,
      callback);
};


/**
 * @param {!proto.token.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenListResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.listTokenByUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/ListTokenByUser',
      request,
      metadata || {},
      methodDescriptor_TokenService_ListTokenByUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.TokenSchema,
 *   !proto.token.TokenCreateResponse>}
 */
const methodDescriptor_TokenService_CreateAccessToken = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/CreateAccessToken',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.TokenSchema,
  proto$2.token.TokenCreateResponse,
  /**
   * @param {!proto.token.TokenSchema} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenCreateResponse.deserializeBinary
);


/**
 * @param {!proto.token.TokenSchema} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.createAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/CreateAccessToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_CreateAccessToken,
      callback);
};


/**
 * @param {!proto.token.TokenSchema} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenCreateResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.createAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/CreateAccessToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_CreateAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.AuthTokenCreate,
 *   !proto.token.AuthTokenCreateResponse>}
 */
const methodDescriptor_TokenService_CreateAuthToken = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/CreateAuthToken',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.AuthTokenCreate,
  proto$2.token.AuthTokenCreateResponse,
  /**
   * @param {!proto.token.AuthTokenCreate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.AuthTokenCreateResponse.deserializeBinary
);


/**
 * @param {!proto.token.AuthTokenCreate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.AuthTokenCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.AuthTokenCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.createAuthToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/CreateAuthToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_CreateAuthToken,
      callback);
};


/**
 * @param {!proto.token.AuthTokenCreate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.AuthTokenCreateResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.createAuthToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/CreateAuthToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_CreateAuthToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.TokenUpdate,
 *   !proto.token.TokenUpdateResponse>}
 */
const methodDescriptor_TokenService_UpdateAccessToken = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/UpdateAccessToken',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.TokenUpdate,
  proto$2.token.TokenUpdateResponse,
  /**
   * @param {!proto.token.TokenUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenUpdateResponse.deserializeBinary
);


/**
 * @param {!proto.token.TokenUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenUpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenUpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.updateAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/UpdateAccessToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_UpdateAccessToken,
      callback);
};


/**
 * @param {!proto.token.TokenUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenUpdateResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.updateAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/UpdateAccessToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_UpdateAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.TokenUpdate,
 *   !proto.token.TokenUpdateResponse>}
 */
const methodDescriptor_TokenService_UpdateAuthToken = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/UpdateAuthToken',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.TokenUpdate,
  proto$2.token.TokenUpdateResponse,
  /**
   * @param {!proto.token.TokenUpdate} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenUpdateResponse.deserializeBinary
);


/**
 * @param {!proto.token.TokenUpdate} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenUpdateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenUpdateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.updateAuthToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/UpdateAuthToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_UpdateAuthToken,
      callback);
};


/**
 * @param {!proto.token.TokenUpdate} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenUpdateResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.updateAuthToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/UpdateAuthToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_UpdateAuthToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.AccessId,
 *   !proto.token.TokenChangeResponse>}
 */
const methodDescriptor_TokenService_DeleteAccessToken = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/DeleteAccessToken',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.AccessId,
  proto$2.token.TokenChangeResponse,
  /**
   * @param {!proto.token.AccessId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenChangeResponse.deserializeBinary
);


/**
 * @param {!proto.token.AccessId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.deleteAccessToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/DeleteAccessToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_DeleteAccessToken,
      callback);
};


/**
 * @param {!proto.token.AccessId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenChangeResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.deleteAccessToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/DeleteAccessToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_DeleteAccessToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.AuthToken,
 *   !proto.token.TokenChangeResponse>}
 */
const methodDescriptor_TokenService_DeleteAuthToken = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/DeleteAuthToken',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.AuthToken,
  proto$2.token.TokenChangeResponse,
  /**
   * @param {!proto.token.AuthToken} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenChangeResponse.deserializeBinary
);


/**
 * @param {!proto.token.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.deleteAuthToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/DeleteAuthToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_DeleteAuthToken,
      callback);
};


/**
 * @param {!proto.token.AuthToken} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenChangeResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.deleteAuthToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/DeleteAuthToken',
      request,
      metadata || {},
      methodDescriptor_TokenService_DeleteAuthToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.token.UserId,
 *   !proto.token.TokenChangeResponse>}
 */
const methodDescriptor_TokenService_DeleteTokenByUser = new grpc$1.web.MethodDescriptor(
  '/token.TokenService/DeleteTokenByUser',
  grpc$1.web.MethodType.UNARY,
  proto$2.token.UserId,
  proto$2.token.TokenChangeResponse,
  /**
   * @param {!proto.token.UserId} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$2.token.TokenChangeResponse.deserializeBinary
);


/**
 * @param {!proto.token.UserId} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.token.TokenChangeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.token.TokenChangeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$2.token.TokenServiceClient.prototype.deleteTokenByUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/token.TokenService/DeleteTokenByUser',
      request,
      metadata || {},
      methodDescriptor_TokenService_DeleteTokenByUser,
      callback);
};


/**
 * @param {!proto.token.UserId} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.token.TokenChangeResponse>}
 *     Promise that resolves to the response
 */
proto$2.token.TokenServicePromiseClient.prototype.deleteTokenByUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/token.TokenService/DeleteTokenByUser',
      request,
      metadata || {},
      methodDescriptor_TokenService_DeleteTokenByUser);
};


var token_grpc_web_pb = proto$2.token;

var token_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(token_grpc_web_pb);

var auth_pb = {};

(function (exports) {
	// source: rmcs_auth_api/auth.proto
	/**
	 * @fileoverview
	 * @enhanceable
	 * @suppress {missingRequire} reports error on implicit type usages.
	 * @suppress {messageConventions} JS Compiler reports an error if a variable or
	 *     field starts with 'MSG_' and isn't a translatable message.
	 * @public
	 */
	// GENERATED CODE -- DO NOT EDIT!
	/* eslint-disable */
	// @ts-nocheck

	var jspb = require$$0;
	var goog = jspb;
	var global =
	    (typeof globalThis !== 'undefined' && globalThis) ||
	    (typeof window !== 'undefined' && window) ||
	    (typeof global !== 'undefined' && global) ||
	    (typeof self !== 'undefined' && self) ||
	    (function () { return this; }).call(null) ||
	    Function('return this')();

	goog.exportSymbol('proto.auth.AccessTokenMap', null, global);
	goog.exportSymbol('proto.auth.ApiKeyRequest', null, global);
	goog.exportSymbol('proto.auth.ApiKeyResponse', null, global);
	goog.exportSymbol('proto.auth.ApiLoginRequest', null, global);
	goog.exportSymbol('proto.auth.ApiLoginResponse', null, global);
	goog.exportSymbol('proto.auth.ProcedureMap', null, global);
	goog.exportSymbol('proto.auth.UserKeyRequest', null, global);
	goog.exportSymbol('proto.auth.UserKeyResponse', null, global);
	goog.exportSymbol('proto.auth.UserLoginRequest', null, global);
	goog.exportSymbol('proto.auth.UserLoginResponse', null, global);
	goog.exportSymbol('proto.auth.UserLogoutRequest', null, global);
	goog.exportSymbol('proto.auth.UserLogoutResponse', null, global);
	goog.exportSymbol('proto.auth.UserRefreshRequest', null, global);
	goog.exportSymbol('proto.auth.UserRefreshResponse', null, global);
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.ApiKeyRequest = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.ApiKeyRequest, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.ApiKeyRequest.displayName = 'proto.auth.ApiKeyRequest';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.ApiKeyResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.ApiKeyResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.ApiKeyResponse.displayName = 'proto.auth.ApiKeyResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.ApiLoginRequest = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.ApiLoginRequest, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.ApiLoginRequest.displayName = 'proto.auth.ApiLoginRequest';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.ProcedureMap = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.ProcedureMap.repeatedFields_, null);
	};
	goog.inherits(proto.auth.ProcedureMap, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.ProcedureMap.displayName = 'proto.auth.ProcedureMap';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.ApiLoginResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.ApiLoginResponse.repeatedFields_, null);
	};
	goog.inherits(proto.auth.ApiLoginResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.ApiLoginResponse.displayName = 'proto.auth.ApiLoginResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.UserKeyRequest = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.UserKeyRequest, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.UserKeyRequest.displayName = 'proto.auth.UserKeyRequest';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.UserKeyResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.UserKeyResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.UserKeyResponse.displayName = 'proto.auth.UserKeyResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.UserLoginRequest = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.UserLoginRequest, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.UserLoginRequest.displayName = 'proto.auth.UserLoginRequest';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.AccessTokenMap = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.AccessTokenMap, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.AccessTokenMap.displayName = 'proto.auth.AccessTokenMap';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.UserLoginResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, proto.auth.UserLoginResponse.repeatedFields_, null);
	};
	goog.inherits(proto.auth.UserLoginResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.UserLoginResponse.displayName = 'proto.auth.UserLoginResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.UserRefreshRequest = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.UserRefreshRequest, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.UserRefreshRequest.displayName = 'proto.auth.UserRefreshRequest';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.UserRefreshResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.UserRefreshResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.UserRefreshResponse.displayName = 'proto.auth.UserRefreshResponse';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.UserLogoutRequest = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.UserLogoutRequest, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.UserLogoutRequest.displayName = 'proto.auth.UserLogoutRequest';
	}
	/**
	 * Generated by JsPbCodeGenerator.
	 * @param {Array=} opt_data Optional initial data array, typically from a
	 * server response, or constructed directly in Javascript. The array is used
	 * in place and becomes part of the constructed object. It is not cloned.
	 * If no data is provided, the constructed object will be empty, but still
	 * valid.
	 * @extends {jspb.Message}
	 * @constructor
	 */
	proto.auth.UserLogoutResponse = function(opt_data) {
	  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
	};
	goog.inherits(proto.auth.UserLogoutResponse, jspb.Message);
	if (goog.DEBUG && !COMPILED) {
	  /**
	   * @public
	   * @override
	   */
	  proto.auth.UserLogoutResponse.displayName = 'proto.auth.UserLogoutResponse';
	}



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.ApiKeyRequest.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.ApiKeyRequest.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.ApiKeyRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ApiKeyRequest.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.ApiKeyRequest}
	 */
	proto.auth.ApiKeyRequest.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.ApiKeyRequest;
	  return proto.auth.ApiKeyRequest.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.ApiKeyRequest} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.ApiKeyRequest}
	 */
	proto.auth.ApiKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiKeyRequest.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.ApiKeyRequest.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.ApiKeyRequest} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ApiKeyRequest.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.ApiKeyResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.ApiKeyResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.ApiKeyResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ApiKeyResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    publicKey: msg.getPublicKey_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.ApiKeyResponse}
	 */
	proto.auth.ApiKeyResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.ApiKeyResponse;
	  return proto.auth.ApiKeyResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.ApiKeyResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.ApiKeyResponse}
	 */
	proto.auth.ApiKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPublicKey(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiKeyResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.ApiKeyResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.ApiKeyResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ApiKeyResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getPublicKey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes public_key = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.ApiKeyResponse.prototype.getPublicKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes public_key = 1;
	 * This is a type-conversion wrapper around `getPublicKey()`
	 * @return {string}
	 */
	proto.auth.ApiKeyResponse.prototype.getPublicKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getPublicKey()));
	};


	/**
	 * optional bytes public_key = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPublicKey()`
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiKeyResponse.prototype.getPublicKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getPublicKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.ApiKeyResponse} returns this
	 */
	proto.auth.ApiKeyResponse.prototype.setPublicKey = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.ApiLoginRequest.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.ApiLoginRequest.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.ApiLoginRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ApiLoginRequest.toObject = function(includeInstance, msg) {
	  var obj = {
	    apiId: msg.getApiId_asB64(),
	    password: msg.getPassword_asB64(),
	    publicKey: msg.getPublicKey_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.ApiLoginRequest}
	 */
	proto.auth.ApiLoginRequest.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.ApiLoginRequest;
	  return proto.auth.ApiLoginRequest.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.ApiLoginRequest} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.ApiLoginRequest}
	 */
	proto.auth.ApiLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPassword(value);
	      break;
	    case 3:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPublicKey(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiLoginRequest.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.ApiLoginRequest.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.ApiLoginRequest} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ApiLoginRequest.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getPassword_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getPublicKey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes api_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.ApiLoginRequest.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes api_id = 1;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.auth.ApiLoginRequest.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiLoginRequest.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.ApiLoginRequest} returns this
	 */
	proto.auth.ApiLoginRequest.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes password = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.ApiLoginRequest.prototype.getPassword = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes password = 2;
	 * This is a type-conversion wrapper around `getPassword()`
	 * @return {string}
	 */
	proto.auth.ApiLoginRequest.prototype.getPassword_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getPassword()));
	};


	/**
	 * optional bytes password = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPassword()`
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiLoginRequest.prototype.getPassword_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getPassword()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.ApiLoginRequest} returns this
	 */
	proto.auth.ApiLoginRequest.prototype.setPassword = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * optional bytes public_key = 3;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.ApiLoginRequest.prototype.getPublicKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * optional bytes public_key = 3;
	 * This is a type-conversion wrapper around `getPublicKey()`
	 * @return {string}
	 */
	proto.auth.ApiLoginRequest.prototype.getPublicKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getPublicKey()));
	};


	/**
	 * optional bytes public_key = 3;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPublicKey()`
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiLoginRequest.prototype.getPublicKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getPublicKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.ApiLoginRequest} returns this
	 */
	proto.auth.ApiLoginRequest.prototype.setPublicKey = function(value) {
	  return jspb.Message.setProto3BytesField(this, 3, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.auth.ProcedureMap.repeatedFields_ = [2];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.ProcedureMap.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.ProcedureMap.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.ProcedureMap} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ProcedureMap.toObject = function(includeInstance, msg) {
	  var f, obj = {
	    procedure: jspb.Message.getFieldWithDefault(msg, 1, ""),
	    rolesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.ProcedureMap}
	 */
	proto.auth.ProcedureMap.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.ProcedureMap;
	  return proto.auth.ProcedureMap.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.ProcedureMap} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.ProcedureMap}
	 */
	proto.auth.ProcedureMap.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setProcedure(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.addRoles(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.ProcedureMap.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.ProcedureMap.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.ProcedureMap} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ProcedureMap.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getProcedure();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getRolesList();
	  if (f.length > 0) {
	    writer.writeRepeatedString(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional string procedure = 1;
	 * @return {string}
	 */
	proto.auth.ProcedureMap.prototype.getProcedure = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.ProcedureMap} returns this
	 */
	proto.auth.ProcedureMap.prototype.setProcedure = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * repeated string roles = 2;
	 * @return {!Array<string>}
	 */
	proto.auth.ProcedureMap.prototype.getRolesList = function() {
	  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
	};


	/**
	 * @param {!Array<string>} value
	 * @return {!proto.auth.ProcedureMap} returns this
	 */
	proto.auth.ProcedureMap.prototype.setRolesList = function(value) {
	  return jspb.Message.setField(this, 2, value || []);
	};


	/**
	 * @param {string} value
	 * @param {number=} opt_index
	 * @return {!proto.auth.ProcedureMap} returns this
	 */
	proto.auth.ProcedureMap.prototype.addRoles = function(value, opt_index) {
	  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.auth.ProcedureMap} returns this
	 */
	proto.auth.ProcedureMap.prototype.clearRolesList = function() {
	  return this.setRolesList([]);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.auth.ApiLoginResponse.repeatedFields_ = [3];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.ApiLoginResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.ApiLoginResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.ApiLoginResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ApiLoginResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    rootKey: msg.getRootKey_asB64(),
	    accessKey: msg.getAccessKey_asB64(),
	    accessProceduresList: jspb.Message.toObjectList(msg.getAccessProceduresList(),
	    proto.auth.ProcedureMap.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.ApiLoginResponse}
	 */
	proto.auth.ApiLoginResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.ApiLoginResponse;
	  return proto.auth.ApiLoginResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.ApiLoginResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.ApiLoginResponse}
	 */
	proto.auth.ApiLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setRootKey(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setAccessKey(value);
	      break;
	    case 3:
	      var value = new proto.auth.ProcedureMap;
	      reader.readMessage(value,proto.auth.ProcedureMap.deserializeBinaryFromReader);
	      msg.addAccessProcedures(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiLoginResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.ApiLoginResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.ApiLoginResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.ApiLoginResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getRootKey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getAccessKey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	  f = message.getAccessProceduresList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      3,
	      f,
	      proto.auth.ProcedureMap.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes root_key = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.ApiLoginResponse.prototype.getRootKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes root_key = 1;
	 * This is a type-conversion wrapper around `getRootKey()`
	 * @return {string}
	 */
	proto.auth.ApiLoginResponse.prototype.getRootKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getRootKey()));
	};


	/**
	 * optional bytes root_key = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getRootKey()`
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiLoginResponse.prototype.getRootKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getRootKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.ApiLoginResponse} returns this
	 */
	proto.auth.ApiLoginResponse.prototype.setRootKey = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional bytes access_key = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.ApiLoginResponse.prototype.getAccessKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes access_key = 2;
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {string}
	 */
	proto.auth.ApiLoginResponse.prototype.getAccessKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getAccessKey()));
	};


	/**
	 * optional bytes access_key = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getAccessKey()`
	 * @return {!Uint8Array}
	 */
	proto.auth.ApiLoginResponse.prototype.getAccessKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getAccessKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.ApiLoginResponse} returns this
	 */
	proto.auth.ApiLoginResponse.prototype.setAccessKey = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};


	/**
	 * repeated ProcedureMap access_procedures = 3;
	 * @return {!Array<!proto.auth.ProcedureMap>}
	 */
	proto.auth.ApiLoginResponse.prototype.getAccessProceduresList = function() {
	  return /** @type{!Array<!proto.auth.ProcedureMap>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.auth.ProcedureMap, 3));
	};


	/**
	 * @param {!Array<!proto.auth.ProcedureMap>} value
	 * @return {!proto.auth.ApiLoginResponse} returns this
	*/
	proto.auth.ApiLoginResponse.prototype.setAccessProceduresList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 3, value);
	};


	/**
	 * @param {!proto.auth.ProcedureMap=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.auth.ProcedureMap}
	 */
	proto.auth.ApiLoginResponse.prototype.addAccessProcedures = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.auth.ProcedureMap, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.auth.ApiLoginResponse} returns this
	 */
	proto.auth.ApiLoginResponse.prototype.clearAccessProceduresList = function() {
	  return this.setAccessProceduresList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.UserKeyRequest.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.UserKeyRequest.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.UserKeyRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserKeyRequest.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.UserKeyRequest}
	 */
	proto.auth.UserKeyRequest.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.UserKeyRequest;
	  return proto.auth.UserKeyRequest.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.UserKeyRequest} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.UserKeyRequest}
	 */
	proto.auth.UserKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.UserKeyRequest.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.UserKeyRequest.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.UserKeyRequest} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserKeyRequest.serializeBinaryToWriter = function(message, writer) {
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.UserKeyResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.UserKeyResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.UserKeyResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserKeyResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    publicKey: msg.getPublicKey_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.UserKeyResponse}
	 */
	proto.auth.UserKeyResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.UserKeyResponse;
	  return proto.auth.UserKeyResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.UserKeyResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.UserKeyResponse}
	 */
	proto.auth.UserKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPublicKey(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.UserKeyResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.UserKeyResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.UserKeyResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserKeyResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getPublicKey_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	};


	/**
	 * optional bytes public_key = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.UserKeyResponse.prototype.getPublicKey = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes public_key = 1;
	 * This is a type-conversion wrapper around `getPublicKey()`
	 * @return {string}
	 */
	proto.auth.UserKeyResponse.prototype.getPublicKey_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getPublicKey()));
	};


	/**
	 * optional bytes public_key = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPublicKey()`
	 * @return {!Uint8Array}
	 */
	proto.auth.UserKeyResponse.prototype.getPublicKey_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getPublicKey()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.UserKeyResponse} returns this
	 */
	proto.auth.UserKeyResponse.prototype.setPublicKey = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.UserLoginRequest.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.UserLoginRequest.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.UserLoginRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserLoginRequest.toObject = function(includeInstance, msg) {
	  var obj = {
	    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
	    password: msg.getPassword_asB64()
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.UserLoginRequest}
	 */
	proto.auth.UserLoginRequest.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.UserLoginRequest;
	  return proto.auth.UserLoginRequest.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.UserLoginRequest} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.UserLoginRequest}
	 */
	proto.auth.UserLoginRequest.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setUsername(value);
	      break;
	    case 2:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setPassword(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.UserLoginRequest.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.UserLoginRequest.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.UserLoginRequest} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserLoginRequest.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getUsername();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getPassword_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional string username = 1;
	 * @return {string}
	 */
	proto.auth.UserLoginRequest.prototype.getUsername = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.UserLoginRequest} returns this
	 */
	proto.auth.UserLoginRequest.prototype.setUsername = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional bytes password = 2;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.UserLoginRequest.prototype.getPassword = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * optional bytes password = 2;
	 * This is a type-conversion wrapper around `getPassword()`
	 * @return {string}
	 */
	proto.auth.UserLoginRequest.prototype.getPassword_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getPassword()));
	};


	/**
	 * optional bytes password = 2;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getPassword()`
	 * @return {!Uint8Array}
	 */
	proto.auth.UserLoginRequest.prototype.getPassword_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getPassword()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.UserLoginRequest} returns this
	 */
	proto.auth.UserLoginRequest.prototype.setPassword = function(value) {
	  return jspb.Message.setProto3BytesField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.AccessTokenMap.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.AccessTokenMap.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.AccessTokenMap} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.AccessTokenMap.toObject = function(includeInstance, msg) {
	  var obj = {
	    apiId: msg.getApiId_asB64(),
	    accessToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    refreshToken: jspb.Message.getFieldWithDefault(msg, 3, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.AccessTokenMap}
	 */
	proto.auth.AccessTokenMap.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.AccessTokenMap;
	  return proto.auth.AccessTokenMap.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.AccessTokenMap} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.AccessTokenMap}
	 */
	proto.auth.AccessTokenMap.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAccessToken(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setRefreshToken(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.AccessTokenMap.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.AccessTokenMap.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.AccessTokenMap} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.AccessTokenMap.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getAccessToken();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getRefreshToken();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes api_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.AccessTokenMap.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes api_id = 1;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.auth.AccessTokenMap.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.auth.AccessTokenMap.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.AccessTokenMap} returns this
	 */
	proto.auth.AccessTokenMap.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string access_token = 2;
	 * @return {string}
	 */
	proto.auth.AccessTokenMap.prototype.getAccessToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.AccessTokenMap} returns this
	 */
	proto.auth.AccessTokenMap.prototype.setAccessToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string refresh_token = 3;
	 * @return {string}
	 */
	proto.auth.AccessTokenMap.prototype.getRefreshToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.AccessTokenMap} returns this
	 */
	proto.auth.AccessTokenMap.prototype.setRefreshToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};



	/**
	 * List of repeated fields within this message type.
	 * @private {!Array<number>}
	 * @const
	 */
	proto.auth.UserLoginResponse.repeatedFields_ = [3];



	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.UserLoginResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.UserLoginResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.UserLoginResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserLoginResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    userId: msg.getUserId_asB64(),
	    authToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    accessTokensList: jspb.Message.toObjectList(msg.getAccessTokensList(),
	    proto.auth.AccessTokenMap.toObject, includeInstance)
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.UserLoginResponse}
	 */
	proto.auth.UserLoginResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.UserLoginResponse;
	  return proto.auth.UserLoginResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.UserLoginResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.UserLoginResponse}
	 */
	proto.auth.UserLoginResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setUserId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAuthToken(value);
	      break;
	    case 3:
	      var value = new proto.auth.AccessTokenMap;
	      reader.readMessage(value,proto.auth.AccessTokenMap.deserializeBinaryFromReader);
	      msg.addAccessTokens(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.UserLoginResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.UserLoginResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.UserLoginResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserLoginResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getUserId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getAuthToken();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getAccessTokensList();
	  if (f.length > 0) {
	    writer.writeRepeatedMessage(
	      3,
	      f,
	      proto.auth.AccessTokenMap.serializeBinaryToWriter
	    );
	  }
	};


	/**
	 * optional bytes user_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.UserLoginResponse.prototype.getUserId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes user_id = 1;
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {string}
	 */
	proto.auth.UserLoginResponse.prototype.getUserId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getUserId()));
	};


	/**
	 * optional bytes user_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {!Uint8Array}
	 */
	proto.auth.UserLoginResponse.prototype.getUserId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getUserId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.UserLoginResponse} returns this
	 */
	proto.auth.UserLoginResponse.prototype.setUserId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string auth_token = 2;
	 * @return {string}
	 */
	proto.auth.UserLoginResponse.prototype.getAuthToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.UserLoginResponse} returns this
	 */
	proto.auth.UserLoginResponse.prototype.setAuthToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * repeated AccessTokenMap access_tokens = 3;
	 * @return {!Array<!proto.auth.AccessTokenMap>}
	 */
	proto.auth.UserLoginResponse.prototype.getAccessTokensList = function() {
	  return /** @type{!Array<!proto.auth.AccessTokenMap>} */ (
	    jspb.Message.getRepeatedWrapperField(this, proto.auth.AccessTokenMap, 3));
	};


	/**
	 * @param {!Array<!proto.auth.AccessTokenMap>} value
	 * @return {!proto.auth.UserLoginResponse} returns this
	*/
	proto.auth.UserLoginResponse.prototype.setAccessTokensList = function(value) {
	  return jspb.Message.setRepeatedWrapperField(this, 3, value);
	};


	/**
	 * @param {!proto.auth.AccessTokenMap=} opt_value
	 * @param {number=} opt_index
	 * @return {!proto.auth.AccessTokenMap}
	 */
	proto.auth.UserLoginResponse.prototype.addAccessTokens = function(opt_value, opt_index) {
	  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.auth.AccessTokenMap, opt_index);
	};


	/**
	 * Clears the list making it empty but non-null.
	 * @return {!proto.auth.UserLoginResponse} returns this
	 */
	proto.auth.UserLoginResponse.prototype.clearAccessTokensList = function() {
	  return this.setAccessTokensList([]);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.UserRefreshRequest.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.UserRefreshRequest.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.UserRefreshRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserRefreshRequest.toObject = function(includeInstance, msg) {
	  var obj = {
	    apiId: msg.getApiId_asB64(),
	    accessToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
	    refreshToken: jspb.Message.getFieldWithDefault(msg, 3, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.UserRefreshRequest}
	 */
	proto.auth.UserRefreshRequest.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.UserRefreshRequest;
	  return proto.auth.UserRefreshRequest.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.UserRefreshRequest} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.UserRefreshRequest}
	 */
	proto.auth.UserRefreshRequest.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setApiId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAccessToken(value);
	      break;
	    case 3:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setRefreshToken(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.UserRefreshRequest.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.UserRefreshRequest.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.UserRefreshRequest} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserRefreshRequest.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getApiId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getAccessToken();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	  f = message.getRefreshToken();
	  if (f.length > 0) {
	    writer.writeString(
	      3,
	      f
	    );
	  }
	};


	/**
	 * optional bytes api_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.UserRefreshRequest.prototype.getApiId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes api_id = 1;
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {string}
	 */
	proto.auth.UserRefreshRequest.prototype.getApiId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getApiId()));
	};


	/**
	 * optional bytes api_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getApiId()`
	 * @return {!Uint8Array}
	 */
	proto.auth.UserRefreshRequest.prototype.getApiId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getApiId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.UserRefreshRequest} returns this
	 */
	proto.auth.UserRefreshRequest.prototype.setApiId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string access_token = 2;
	 * @return {string}
	 */
	proto.auth.UserRefreshRequest.prototype.getAccessToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.UserRefreshRequest} returns this
	 */
	proto.auth.UserRefreshRequest.prototype.setAccessToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};


	/**
	 * optional string refresh_token = 3;
	 * @return {string}
	 */
	proto.auth.UserRefreshRequest.prototype.getRefreshToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.UserRefreshRequest} returns this
	 */
	proto.auth.UserRefreshRequest.prototype.setRefreshToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 3, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.UserRefreshResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.UserRefreshResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.UserRefreshResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserRefreshResponse.toObject = function(includeInstance, msg) {
	  var obj = {
	    accessToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
	    refreshToken: jspb.Message.getFieldWithDefault(msg, 2, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.UserRefreshResponse}
	 */
	proto.auth.UserRefreshResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.UserRefreshResponse;
	  return proto.auth.UserRefreshResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.UserRefreshResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.UserRefreshResponse}
	 */
	proto.auth.UserRefreshResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAccessToken(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setRefreshToken(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.UserRefreshResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.UserRefreshResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.UserRefreshResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserRefreshResponse.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getAccessToken();
	  if (f.length > 0) {
	    writer.writeString(
	      1,
	      f
	    );
	  }
	  f = message.getRefreshToken();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional string access_token = 1;
	 * @return {string}
	 */
	proto.auth.UserRefreshResponse.prototype.getAccessToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.UserRefreshResponse} returns this
	 */
	proto.auth.UserRefreshResponse.prototype.setAccessToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 1, value);
	};


	/**
	 * optional string refresh_token = 2;
	 * @return {string}
	 */
	proto.auth.UserRefreshResponse.prototype.getRefreshToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.UserRefreshResponse} returns this
	 */
	proto.auth.UserRefreshResponse.prototype.setRefreshToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.UserLogoutRequest.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.UserLogoutRequest.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.UserLogoutRequest} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserLogoutRequest.toObject = function(includeInstance, msg) {
	  var obj = {
	    userId: msg.getUserId_asB64(),
	    authToken: jspb.Message.getFieldWithDefault(msg, 2, "")
	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.UserLogoutRequest}
	 */
	proto.auth.UserLogoutRequest.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.UserLogoutRequest;
	  return proto.auth.UserLogoutRequest.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.UserLogoutRequest} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.UserLogoutRequest}
	 */
	proto.auth.UserLogoutRequest.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    case 1:
	      var value = /** @type {!Uint8Array} */ (reader.readBytes());
	      msg.setUserId(value);
	      break;
	    case 2:
	      var value = /** @type {string} */ (reader.readString());
	      msg.setAuthToken(value);
	      break;
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.UserLogoutRequest.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.UserLogoutRequest.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.UserLogoutRequest} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserLogoutRequest.serializeBinaryToWriter = function(message, writer) {
	  var f = undefined;
	  f = message.getUserId_asU8();
	  if (f.length > 0) {
	    writer.writeBytes(
	      1,
	      f
	    );
	  }
	  f = message.getAuthToken();
	  if (f.length > 0) {
	    writer.writeString(
	      2,
	      f
	    );
	  }
	};


	/**
	 * optional bytes user_id = 1;
	 * @return {!(string|Uint8Array)}
	 */
	proto.auth.UserLogoutRequest.prototype.getUserId = function() {
	  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
	};


	/**
	 * optional bytes user_id = 1;
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {string}
	 */
	proto.auth.UserLogoutRequest.prototype.getUserId_asB64 = function() {
	  return /** @type {string} */ (jspb.Message.bytesAsB64(
	      this.getUserId()));
	};


	/**
	 * optional bytes user_id = 1;
	 * Note that Uint8Array is not supported on all browsers.
	 * @see http://caniuse.com/Uint8Array
	 * This is a type-conversion wrapper around `getUserId()`
	 * @return {!Uint8Array}
	 */
	proto.auth.UserLogoutRequest.prototype.getUserId_asU8 = function() {
	  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
	      this.getUserId()));
	};


	/**
	 * @param {!(string|Uint8Array)} value
	 * @return {!proto.auth.UserLogoutRequest} returns this
	 */
	proto.auth.UserLogoutRequest.prototype.setUserId = function(value) {
	  return jspb.Message.setProto3BytesField(this, 1, value);
	};


	/**
	 * optional string auth_token = 2;
	 * @return {string}
	 */
	proto.auth.UserLogoutRequest.prototype.getAuthToken = function() {
	  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
	};


	/**
	 * @param {string} value
	 * @return {!proto.auth.UserLogoutRequest} returns this
	 */
	proto.auth.UserLogoutRequest.prototype.setAuthToken = function(value) {
	  return jspb.Message.setProto3StringField(this, 2, value);
	};





	if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * Optional fields that are not set will be set to undefined.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
	 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
	 *     JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.auth.UserLogoutResponse.prototype.toObject = function(opt_includeInstance) {
	  return proto.auth.UserLogoutResponse.toObject(opt_includeInstance, this);
	};


	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
	 *     the JSPB instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.auth.UserLogoutResponse} msg The msg instance to transform.
	 * @return {!Object}
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserLogoutResponse.toObject = function(includeInstance, msg) {
	  var obj = {

	  };

	  if (includeInstance) {
	    obj.$jspbMessageInstance = msg;
	  }
	  return obj;
	};
	}


	/**
	 * Deserializes binary data (in protobuf wire format).
	 * @param {jspb.ByteSource} bytes The bytes to deserialize.
	 * @return {!proto.auth.UserLogoutResponse}
	 */
	proto.auth.UserLogoutResponse.deserializeBinary = function(bytes) {
	  var reader = new jspb.BinaryReader(bytes);
	  var msg = new proto.auth.UserLogoutResponse;
	  return proto.auth.UserLogoutResponse.deserializeBinaryFromReader(msg, reader);
	};


	/**
	 * Deserializes binary data (in protobuf wire format) from the
	 * given reader into the given message object.
	 * @param {!proto.auth.UserLogoutResponse} msg The message object to deserialize into.
	 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	 * @return {!proto.auth.UserLogoutResponse}
	 */
	proto.auth.UserLogoutResponse.deserializeBinaryFromReader = function(msg, reader) {
	  while (reader.nextField()) {
	    if (reader.isEndGroup()) {
	      break;
	    }
	    var field = reader.getFieldNumber();
	    switch (field) {
	    default:
	      reader.skipField();
	      break;
	    }
	  }
	  return msg;
	};


	/**
	 * Serializes the message to binary data (in protobuf wire format).
	 * @return {!Uint8Array}
	 */
	proto.auth.UserLogoutResponse.prototype.serializeBinary = function() {
	  var writer = new jspb.BinaryWriter();
	  proto.auth.UserLogoutResponse.serializeBinaryToWriter(this, writer);
	  return writer.getResultBuffer();
	};


	/**
	 * Serializes the given message to binary data (in protobuf wire
	 * format), writing to the given BinaryWriter.
	 * @param {!proto.auth.UserLogoutResponse} message
	 * @param {!jspb.BinaryWriter} writer
	 * @suppress {unusedLocalVariables} f is only used for nested messages
	 */
	proto.auth.UserLogoutResponse.serializeBinaryToWriter = function(message, writer) {
	};


	goog.object.extend(exports, proto.auth); 
} (auth_pb));

/**
 * @fileoverview gRPC-Web generated client stub for auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: rmcs_auth_api/auth.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require$$0$1;

const proto$1 = {};
proto$1.auth = auth_pb;

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$1.auth.AuthServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto$1.auth.AuthServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.ApiKeyRequest,
 *   !proto.auth.ApiKeyResponse>}
 */
const methodDescriptor_AuthService_ApiLoginKey = new grpc.web.MethodDescriptor(
  '/auth.AuthService/ApiLoginKey',
  grpc.web.MethodType.UNARY,
  proto$1.auth.ApiKeyRequest,
  proto$1.auth.ApiKeyResponse,
  /**
   * @param {!proto.auth.ApiKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.auth.ApiKeyResponse.deserializeBinary
);


/**
 * @param {!proto.auth.ApiKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.ApiKeyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.ApiKeyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.auth.AuthServiceClient.prototype.apiLoginKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/ApiLoginKey',
      request,
      metadata || {},
      methodDescriptor_AuthService_ApiLoginKey,
      callback);
};


/**
 * @param {!proto.auth.ApiKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.ApiKeyResponse>}
 *     Promise that resolves to the response
 */
proto$1.auth.AuthServicePromiseClient.prototype.apiLoginKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/ApiLoginKey',
      request,
      metadata || {},
      methodDescriptor_AuthService_ApiLoginKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.ApiLoginRequest,
 *   !proto.auth.ApiLoginResponse>}
 */
const methodDescriptor_AuthService_ApiLogin = new grpc.web.MethodDescriptor(
  '/auth.AuthService/ApiLogin',
  grpc.web.MethodType.UNARY,
  proto$1.auth.ApiLoginRequest,
  proto$1.auth.ApiLoginResponse,
  /**
   * @param {!proto.auth.ApiLoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.auth.ApiLoginResponse.deserializeBinary
);


/**
 * @param {!proto.auth.ApiLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.ApiLoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.ApiLoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.auth.AuthServiceClient.prototype.apiLogin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/ApiLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_ApiLogin,
      callback);
};


/**
 * @param {!proto.auth.ApiLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.ApiLoginResponse>}
 *     Promise that resolves to the response
 */
proto$1.auth.AuthServicePromiseClient.prototype.apiLogin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/ApiLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_ApiLogin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.UserKeyRequest,
 *   !proto.auth.UserKeyResponse>}
 */
const methodDescriptor_AuthService_UserLoginKey = new grpc.web.MethodDescriptor(
  '/auth.AuthService/UserLoginKey',
  grpc.web.MethodType.UNARY,
  proto$1.auth.UserKeyRequest,
  proto$1.auth.UserKeyResponse,
  /**
   * @param {!proto.auth.UserKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.auth.UserKeyResponse.deserializeBinary
);


/**
 * @param {!proto.auth.UserKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.UserKeyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.UserKeyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.auth.AuthServiceClient.prototype.userLoginKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/UserLoginKey',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserLoginKey,
      callback);
};


/**
 * @param {!proto.auth.UserKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.UserKeyResponse>}
 *     Promise that resolves to the response
 */
proto$1.auth.AuthServicePromiseClient.prototype.userLoginKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/UserLoginKey',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserLoginKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.UserLoginRequest,
 *   !proto.auth.UserLoginResponse>}
 */
const methodDescriptor_AuthService_UserLogin = new grpc.web.MethodDescriptor(
  '/auth.AuthService/UserLogin',
  grpc.web.MethodType.UNARY,
  proto$1.auth.UserLoginRequest,
  proto$1.auth.UserLoginResponse,
  /**
   * @param {!proto.auth.UserLoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.auth.UserLoginResponse.deserializeBinary
);


/**
 * @param {!proto.auth.UserLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.UserLoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.UserLoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.auth.AuthServiceClient.prototype.userLogin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/UserLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserLogin,
      callback);
};


/**
 * @param {!proto.auth.UserLoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.UserLoginResponse>}
 *     Promise that resolves to the response
 */
proto$1.auth.AuthServicePromiseClient.prototype.userLogin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/UserLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserLogin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.UserRefreshRequest,
 *   !proto.auth.UserRefreshResponse>}
 */
const methodDescriptor_AuthService_UserRefresh = new grpc.web.MethodDescriptor(
  '/auth.AuthService/UserRefresh',
  grpc.web.MethodType.UNARY,
  proto$1.auth.UserRefreshRequest,
  proto$1.auth.UserRefreshResponse,
  /**
   * @param {!proto.auth.UserRefreshRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.auth.UserRefreshResponse.deserializeBinary
);


/**
 * @param {!proto.auth.UserRefreshRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.UserRefreshResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.UserRefreshResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.auth.AuthServiceClient.prototype.userRefresh =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/UserRefresh',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserRefresh,
      callback);
};


/**
 * @param {!proto.auth.UserRefreshRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.UserRefreshResponse>}
 *     Promise that resolves to the response
 */
proto$1.auth.AuthServicePromiseClient.prototype.userRefresh =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/UserRefresh',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserRefresh);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.UserLogoutRequest,
 *   !proto.auth.UserLogoutResponse>}
 */
const methodDescriptor_AuthService_UserLogout = new grpc.web.MethodDescriptor(
  '/auth.AuthService/UserLogout',
  grpc.web.MethodType.UNARY,
  proto$1.auth.UserLogoutRequest,
  proto$1.auth.UserLogoutResponse,
  /**
   * @param {!proto.auth.UserLogoutRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto$1.auth.UserLogoutResponse.deserializeBinary
);


/**
 * @param {!proto.auth.UserLogoutRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.UserLogoutResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.UserLogoutResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto$1.auth.AuthServiceClient.prototype.userLogout =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.AuthService/UserLogout',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserLogout,
      callback);
};


/**
 * @param {!proto.auth.UserLogoutRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.UserLogoutResponse>}
 *     Promise that resolves to the response
 */
proto$1.auth.AuthServicePromiseClient.prototype.userLogout =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.AuthService/UserLogout',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserLogout);
};


var auth_grpc_web_pb = proto$1.auth;

var auth_grpc_web_pb$1 = /*@__PURE__*/getDefaultExportFromCjs(auth_grpc_web_pb);

export { api_grpc_web_pb$1 as pb_api, auth_grpc_web_pb$1 as pb_auth, role_grpc_web_pb$1 as pb_role, token_grpc_web_pb$1 as pb_token, user_grpc_web_pb$1 as pb_user };
