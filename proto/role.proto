syntax = "proto3";
package role;

service RoleService {
    rpc ReadRole(RoleId) returns (RoleReadResponse);

    rpc ReadRoleByName(RoleName) returns (RoleReadResponse);

    rpc ListRoleByApi(ApiId) returns (RoleListResponse);

    rpc ListRoleByUser(UserId) returns (RoleListResponse);

    rpc CreateRole(RoleSchema) returns (RoleCreateResponse);

    rpc UpdateRole(RoleUpdate) returns (RoleChangeResponse);

    rpc DeleteRole(RoleId) returns (RoleChangeResponse);

    rpc AddRoleAccess(RoleAccess) returns (RoleChangeResponse);

    rpc RemoveRoleAccess(RoleAccess) returns (RoleChangeResponse);
}

message RoleSchema {
    int32 id = 1;
    int32 api_id = 2;
    string name = 3;
    bool multi = 4;
    bool ip_lock = 5;
    int32 access_duration = 6;
    int32 refresh_duration = 7;
    bytes access_key = 8;
    repeated int32 procedures = 9;
}

message RoleId {
    int32 id = 1;
}

message RoleName {
    int32 api_id = 1;
    string name = 2;
}

message ApiId {
    int32 api_id = 1;
}

message UserId {
    int32 user_id = 1;
}

message RoleUpdate {
    int32 id = 1;
    optional string name = 2;
    optional bool multi = 3;
    optional bool ip_lock = 4;
    optional int32 access_duration = 5;
    optional int32 refresh_duration = 6;
}

message RoleAccess {
    int32 id = 1;
    int32 procedure_id = 2;
}

message RoleReadResponse {
    RoleSchema result = 1;
}

message RoleListResponse {
    repeated RoleSchema results = 1;
}

message RoleCreateResponse {
    int32 id = 1;
}

message RoleChangeResponse {
}
